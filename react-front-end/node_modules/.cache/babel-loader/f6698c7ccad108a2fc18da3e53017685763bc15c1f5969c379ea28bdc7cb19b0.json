{"ast":null,"code":"var _jsxFileName = \"/Users/mak/Documents/code/crud-springboot-reactjs-docker/react-front-end/src/Components/EmployeeList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PAGE_SIZE = 10;\nconst MAX_RECORDS_IN_MEMORY = 500; // This logic will be temporarily bypassed for testing\n\nconst styles = `\n.employee-list-container {\n  max-width: 900px;\n  margin: 30px auto;\n  padding: 25px;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background-color: #f4f7f6;\n  border-radius: 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n}\n.employee-list-container h1 { text-align: center; color: #333; margin-bottom: 25px; }\n.employee-table { width: 100%; border-collapse: collapse; margin-top: 20px; background-color: #ffffff; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06); border-radius: 8px; overflow: hidden; }\n.employee-table th, .employee-table td { border: 1px solid #e0e0e0; padding: 12px 15px; text-align: left; font-size: 0.95em; }\n.employee-table th { background-color: #0056b3; color: #ffffff; font-weight: 600; position: sticky; top: 0; z-index: 10; }\n.employee-table tbody tr:nth-child(even) { background-color: #f9f9f9; }\n.employee-table tbody tr:hover { background-color: #f1f1f1; transition: background-color 0.2s ease-in-out; }\n.employee-table td { color: #333; }\n.loader, .end-message, .no-employees { padding: 25px; text-align: center; color: #666; font-style: italic; }\n.no-employees { font-weight: bold; }\n`;\nfunction EmployeeList() {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [isLoadingState, setIsLoadingState] = useState(false);\n  const [hasMoreState, setHasMoreState] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0);\n  const isLoadingRef = useRef(false);\n  const fetchEmployeesAPI = useCallback(async (pageToFetch, currentHasMoreValue) => {\n    if (isLoadingRef.current) {\n      console.log(`[FETCH_API_GUARDED_CONCURRENT] page: ${pageToFetch}. Fetch skipped, isLoadingRef.current is true.`);\n      return;\n    }\n    if (pageToFetch > 0 && !currentHasMoreValue) {\n      console.log(`[FETCH_API_GUARDED_HASMORE] page: ${pageToFetch}. Fetch skipped, currentHasMoreValue is false.`);\n      if (hasMoreState) setHasMoreState(false); // Ensure UI reflects no more data\n      return;\n    }\n    console.log(`[FETCH_API_CALLED] pageToFetch: ${pageToFetch}, currentHasMoreValue: ${currentHasMoreValue}`);\n    isLoadingRef.current = true;\n    setIsLoadingState(true);\n    try {\n      console.log(`[FETCH_API_REQUEST] Requesting page: ${pageToFetch}`);\n      const response = await axios.get(`http://localhost:8080/api/employees`, {\n        params: {\n          page: pageToFetch,\n          size: PAGE_SIZE\n        }\n      });\n      const data = response.data;\n      console.log(`[FETCH_API_RESPONSE] Received data for page ${pageToFetch}:`, data);\n      if (data.content && data.content.length > 0) {\n        setEmployees(prevEmployees => {\n          const newCombinedEmployees = pageToFetch === 0 ? data.content : [...prevEmployees, ...data.content];\n\n          // *** MAX_RECORDS_IN_MEMORY LOGIC TEMPORARILY COMMENTED OUT FOR TESTING ***\n          // const finalEmployees = newCombinedEmployees.length > MAX_RECORDS_IN_MEMORY\n          //   ? newCombinedEmployees.slice(newCombinedEmployees.length - MAX_RECORDS_IN_MEMORY)\n          //   : newCombinedEmployees;\n          // console.log(`[FETCH_API_SET_EMPLOYEES] page ${pageToFetch}. Prev length: ${prevEmployees.length}, New content: ${data.content.length}, Final length with MAX_RECORDS: ${finalEmployees.length}`);\n          // return finalEmployees;\n\n          // For testing: allow employees array to grow indefinitely\n          console.log(`[FETCH_API_SET_EMPLOYEES_TESTING] page ${pageToFetch}. Prev length: ${prevEmployees.length}, New content: ${data.content.length}, New combined length: ${newCombinedEmployees.length}`);\n          return newCombinedEmployees;\n        });\n        const newHasMore = !data.last;\n        setHasMoreState(newHasMore);\n        setCurrentPage(pageToFetch + 1);\n        console.log(`[FETCH_API_SUCCESS] page ${pageToFetch}. HasMore set to: ${newHasMore}. Next page to fetch: ${pageToFetch + 1}`);\n      } else {\n        console.log(`[FETCH_API_NO_CONTENT] No content for page ${pageToFetch}. Setting hasMoreState to false.`);\n        setHasMoreState(false);\n        if (pageToFetch === 0) {\n          console.log(`[FETCH_API_NO_CONTENT] Initial fetch (page 0) had no content. Clearing employees array.`);\n          setEmployees([]);\n        }\n      }\n    } catch (error) {\n      console.error(`[FETCH_API_ERROR] Failed to fetch employees for page ${pageToFetch}:`, error);\n      if (axios.isAxiosError(error)) {\n        var _error$response;\n        console.error(\"[FETCH_API_ERROR] Axios error details:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      }\n      setHasMoreState(false);\n    } finally {\n      isLoadingRef.current = false;\n      setIsLoadingState(false);\n      console.log(`[FETCH_API_FINALLY] For page: ${pageToFetch}. isLoadingRef & isLoadingState set to false.`);\n    }\n  }, [hasMoreState]); // Added hasMoreState as a dependency because it's used in the guard logic for fetchEmployeesAPI\n\n  useEffect(() => {\n    console.log(\"[INITIAL_LOAD_EFFECT] Component mounted. Resetting state and fetching initial data (page 0).\");\n    setEmployees([]);\n    setCurrentPage(0);\n    setHasMoreState(true);\n    isLoadingRef.current = false;\n    setIsLoadingState(false);\n    fetchEmployeesAPI(0, true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // fetchEmployeesAPI is not perfectly stable if hasMoreState is a dependency, but this effect should still primarily run on mount.\n\n  const loadMoreEmployees = () => {\n    // Prioritize isLoadingRef for immediate concurrency check\n    if (isLoadingRef.current) {\n      console.log(`[LOAD_MORE_SKIPPED] isLoadingRef.current is true.`);\n      return;\n    }\n    // Then check hasMoreState (the state variable used by InfiniteScroll's prop)\n    if (!hasMoreState) {\n      console.log(`[LOAD_MORE_SKIPPED] hasMoreState is false.`);\n      return;\n    }\n    console.log(`[LOAD_MORE_CALLED] CurrentPageToFetch: ${currentPage}, HasMoreState: ${hasMoreState}, IsLoadingState (from state): ${isLoadingState}`);\n    fetchEmployeesAPI(currentPage, hasMoreState);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: styles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"employee-list-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Employee Directory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        dataLength: employees.length,\n        next: loadMoreEmployees,\n        hasMore: hasMoreState,\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loader\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Loading more employees...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 19\n        }, this),\n        endMessage: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: 'center'\n          },\n          className: \"end-message\",\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"You've reached the end of the list!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"employee-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"First Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 30\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Last Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Birth Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 67\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.firstName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.lastName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.birthDate ? new Date(employee.birthDate).toLocaleDateString() : 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 19\n              }, this)]\n            }, employee.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), !isLoadingState && employees.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-employees\",\n        children: hasMoreState ? \"Fetching initial data...\" : \"No employees found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this), isLoadingState && employees.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Loading initial employees...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(EmployeeList, \"QRdn3xMs2JoRlTsBw6tqcDHX5xU=\");\n_c = EmployeeList;\nexport default EmployeeList;\nvar _c;\n$RefreshReg$(_c, \"EmployeeList\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","InfiniteScroll","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","PAGE_SIZE","MAX_RECORDS_IN_MEMORY","styles","EmployeeList","_s","employees","setEmployees","isLoadingState","setIsLoadingState","hasMoreState","setHasMoreState","currentPage","setCurrentPage","isLoadingRef","fetchEmployeesAPI","pageToFetch","currentHasMoreValue","current","console","log","response","get","params","page","size","data","content","length","prevEmployees","newCombinedEmployees","newHasMore","last","error","isAxiosError","_error$response","message","loadMoreEmployees","children","fileName","_jsxFileName","lineNumber","columnNumber","className","dataLength","next","hasMore","loader","endMessage","style","textAlign","map","employee","id","firstName","lastName","birthDate","Date","toLocaleDateString","_c","$RefreshReg$"],"sources":["/Users/mak/Documents/code/crud-springboot-reactjs-docker/react-front-end/src/Components/EmployeeList.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport axios from 'axios';\n\nconst PAGE_SIZE = 10;\nconst MAX_RECORDS_IN_MEMORY = 500; // This logic will be temporarily bypassed for testing\n\nconst styles = `\n.employee-list-container {\n  max-width: 900px;\n  margin: 30px auto;\n  padding: 25px;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background-color: #f4f7f6;\n  border-radius: 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n}\n.employee-list-container h1 { text-align: center; color: #333; margin-bottom: 25px; }\n.employee-table { width: 100%; border-collapse: collapse; margin-top: 20px; background-color: #ffffff; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06); border-radius: 8px; overflow: hidden; }\n.employee-table th, .employee-table td { border: 1px solid #e0e0e0; padding: 12px 15px; text-align: left; font-size: 0.95em; }\n.employee-table th { background-color: #0056b3; color: #ffffff; font-weight: 600; position: sticky; top: 0; z-index: 10; }\n.employee-table tbody tr:nth-child(even) { background-color: #f9f9f9; }\n.employee-table tbody tr:hover { background-color: #f1f1f1; transition: background-color 0.2s ease-in-out; }\n.employee-table td { color: #333; }\n.loader, .end-message, .no-employees { padding: 25px; text-align: center; color: #666; font-style: italic; }\n.no-employees { font-weight: bold; }\n`;\n\nfunction EmployeeList() {\n  const [employees, setEmployees] = useState([]);\n  const [isLoadingState, setIsLoadingState] = useState(false);\n  const [hasMoreState, setHasMoreState] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0);\n\n  const isLoadingRef = useRef(false);\n\n  const fetchEmployeesAPI = useCallback(async (pageToFetch, currentHasMoreValue) => {\n    if (isLoadingRef.current) {\n      console.log(`[FETCH_API_GUARDED_CONCURRENT] page: ${pageToFetch}. Fetch skipped, isLoadingRef.current is true.`);\n      return;\n    }\n    if (pageToFetch > 0 && !currentHasMoreValue) {\n      console.log(`[FETCH_API_GUARDED_HASMORE] page: ${pageToFetch}. Fetch skipped, currentHasMoreValue is false.`);\n      if (hasMoreState) setHasMoreState(false); // Ensure UI reflects no more data\n      return;\n    }\n\n    console.log(`[FETCH_API_CALLED] pageToFetch: ${pageToFetch}, currentHasMoreValue: ${currentHasMoreValue}`);\n    isLoadingRef.current = true;\n    setIsLoadingState(true);\n\n    try {\n      console.log(`[FETCH_API_REQUEST] Requesting page: ${pageToFetch}`);\n      const response = await axios.get(`http://localhost:8080/api/employees`, {\n        params: { page: pageToFetch, size: PAGE_SIZE }\n      });\n      const data = response.data;\n      console.log(`[FETCH_API_RESPONSE] Received data for page ${pageToFetch}:`, data);\n\n      if (data.content && data.content.length > 0) {\n        setEmployees(prevEmployees => {\n          const newCombinedEmployees = pageToFetch === 0 ? data.content : [...prevEmployees, ...data.content];\n          \n          // *** MAX_RECORDS_IN_MEMORY LOGIC TEMPORARILY COMMENTED OUT FOR TESTING ***\n          // const finalEmployees = newCombinedEmployees.length > MAX_RECORDS_IN_MEMORY\n          //   ? newCombinedEmployees.slice(newCombinedEmployees.length - MAX_RECORDS_IN_MEMORY)\n          //   : newCombinedEmployees;\n          // console.log(`[FETCH_API_SET_EMPLOYEES] page ${pageToFetch}. Prev length: ${prevEmployees.length}, New content: ${data.content.length}, Final length with MAX_RECORDS: ${finalEmployees.length}`);\n          // return finalEmployees;\n\n          // For testing: allow employees array to grow indefinitely\n          console.log(`[FETCH_API_SET_EMPLOYEES_TESTING] page ${pageToFetch}. Prev length: ${prevEmployees.length}, New content: ${data.content.length}, New combined length: ${newCombinedEmployees.length}`);\n          return newCombinedEmployees;\n        });\n        const newHasMore = !data.last;\n        setHasMoreState(newHasMore);\n        setCurrentPage(pageToFetch + 1);\n        console.log(`[FETCH_API_SUCCESS] page ${pageToFetch}. HasMore set to: ${newHasMore}. Next page to fetch: ${pageToFetch + 1}`);\n      } else {\n        console.log(`[FETCH_API_NO_CONTENT] No content for page ${pageToFetch}. Setting hasMoreState to false.`);\n        setHasMoreState(false);\n        if (pageToFetch === 0) {\n            console.log(`[FETCH_API_NO_CONTENT] Initial fetch (page 0) had no content. Clearing employees array.`);\n            setEmployees([]);\n        }\n      }\n    } catch (error) {\n      console.error(`[FETCH_API_ERROR] Failed to fetch employees for page ${pageToFetch}:`, error);\n      if (axios.isAxiosError(error)) {\n        console.error(\"[FETCH_API_ERROR] Axios error details:\", error.response?.data || error.message);\n      }\n      setHasMoreState(false);\n    } finally {\n      isLoadingRef.current = false;\n      setIsLoadingState(false);\n      console.log(`[FETCH_API_FINALLY] For page: ${pageToFetch}. isLoadingRef & isLoadingState set to false.`);\n    }\n  }, [hasMoreState]); // Added hasMoreState as a dependency because it's used in the guard logic for fetchEmployeesAPI\n\n  useEffect(() => {\n    console.log(\"[INITIAL_LOAD_EFFECT] Component mounted. Resetting state and fetching initial data (page 0).\");\n    setEmployees([]);\n    setCurrentPage(0);\n    setHasMoreState(true);\n    isLoadingRef.current = false;\n    setIsLoadingState(false);\n    \n    fetchEmployeesAPI(0, true);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // fetchEmployeesAPI is not perfectly stable if hasMoreState is a dependency, but this effect should still primarily run on mount.\n\n  const loadMoreEmployees = () => {\n    // Prioritize isLoadingRef for immediate concurrency check\n    if (isLoadingRef.current) {\n      console.log(`[LOAD_MORE_SKIPPED] isLoadingRef.current is true.`);\n      return;\n    }\n    // Then check hasMoreState (the state variable used by InfiniteScroll's prop)\n    if (!hasMoreState) {\n      console.log(`[LOAD_MORE_SKIPPED] hasMoreState is false.`);\n      return;\n    }\n    \n    console.log(`[LOAD_MORE_CALLED] CurrentPageToFetch: ${currentPage}, HasMoreState: ${hasMoreState}, IsLoadingState (from state): ${isLoadingState}`);\n    fetchEmployeesAPI(currentPage, hasMoreState);\n  };\n\n  return (\n    <>\n      <style>{styles}</style>\n      <div className=\"employee-list-container\">\n        <h1>Employee Directory</h1>\n        <InfiniteScroll\n          dataLength={employees.length}\n          next={loadMoreEmployees}\n          hasMore={hasMoreState}\n          loader={<div className=\"loader\"><h4>Loading more employees...</h4></div>}\n          endMessage={\n            <p style={{ textAlign: 'center' }} className=\"end-message\">\n              <b>You've reached the end of the list!</b>\n            </p>\n          }\n        >\n          <table className=\"employee-table\">\n            <thead>\n              <tr><th>ID</th><th>First Name</th><th>Last Name</th><th>Birth Date</th></tr>\n            </thead>\n            <tbody>\n              {employees.map(employee => (\n                <tr key={employee.id}>\n                  <td>{employee.id}</td>\n                  <td>{employee.firstName}</td>\n                  <td>{employee.lastName}</td>\n                  <td>{employee.birthDate ? new Date(employee.birthDate).toLocaleDateString() : 'N/A'}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </InfiniteScroll>\n        {!isLoadingState && employees.length === 0 && (\n          <p className=\"no-employees\">\n            {hasMoreState ? \"Fetching initial data...\" : \"No employees found.\"}\n          </p>\n        )}\n        {isLoadingState && employees.length === 0 && (\n          <div className=\"loader\"><h4>Loading initial employees...</h4></div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default EmployeeList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}