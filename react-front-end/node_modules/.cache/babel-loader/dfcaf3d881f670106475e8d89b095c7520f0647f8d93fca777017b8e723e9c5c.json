{"ast":null,"code":"var _jsxFileName = \"/Users/mak/Documents/code/crud-springboot-reactjs-docker/react-front-end/src/Components/EmployeeList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport axios from 'axios'; // Import axios\n// Assuming you have a CSS file for styling, e.g., EmployeeList.css\n// import './EmployeeList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PAGE_SIZE = 10; // Define page size, should align with backend pagination\nconst MAX_RECORDS_IN_MEMORY = 500; // Maximum number of records to keep in memory/on page\n\n// Placeholder for CSS styles if not using a separate file\nconst styles = `\n.employee-list-container {\n  max-width: 900px;\n  margin: 30px auto;\n  padding: 25px;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background-color: #f4f7f6;\n  border-radius: 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n}\n\n.employee-list-container h1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 25px;\n}\n\n.employee-card {\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  padding: 20px;\n  margin-bottom: 20px;\n  background-color: #ffffff;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);\n  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n}\n\n.employee-card:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n}\n\n.employee-card h3 {\n  margin-top: 0;\n  color: #0056b3;\n  margin-bottom: 10px;\n}\n\n.employee-card p {\n  margin: 8px 0;\n  color: #555;\n  font-size: 0.95em;\n}\n\n.loader,\n.end-message,\n.no-employees {\n  padding: 25px;\n  text-align: center;\n  color: #666;\n  font-style: italic;\n}\n\n.no-employees {\n  font-weight: bold;\n}\n`;\nfunction EmployeeList() {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  // Renamed state variables to avoid confusion with refs\n  const [isLoadingState, setIsLoadingState] = useState(false);\n  const [hasMoreState, setHasMoreState] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0); // Tracks the *next* page to fetch\n\n  // Refs to hold the latest values of isLoading and hasMore.\n  const isLoadingRef = useRef(isLoadingState);\n  const hasMoreRef = useRef(hasMoreState);\n\n  // Keep refs synchronized with their respective state variables.\n  useEffect(() => {\n    isLoadingRef.current = isLoadingState;\n  }, [isLoadingState]);\n  useEffect(() => {\n    hasMoreRef.current = hasMoreState;\n  }, [hasMoreState]);\n\n  // useCallback ensures fetchEmployeesAPI has a stable reference across renders.\n  const fetchEmployeesAPI = useCallback(async pageToFetch => {\n    // Guard: Do not fetch if already loading, or if it's not the first page and no more data exists.\n    if (isLoadingRef.current || pageToFetch > 0 && !hasMoreRef.current) {\n      return;\n    }\n    setIsLoadingState(true);\n    try {\n      // Using axios for the API call\n      const response = await axios.get(`http://localhost:6868/api/employees`, {\n        params: {\n          page: pageToFetch,\n          size: PAGE_SIZE\n        }\n      });\n\n      // With axios, the response data is directly available in response.data\n      const data = response.data; // This is the Slice<EmployeeDto> object\n\n      if (data.content && data.content.length > 0) {\n        setEmployees(prevEmployees => {\n          // Combine new data with previous data\n          const newCombinedEmployees = pageToFetch === 0 ? data.content : [...prevEmployees, ...data.content];\n\n          // If the combined length exceeds MAX_RECORDS_IN_MEMORY, slice to keep only the latest records\n          if (newCombinedEmployees.length > MAX_RECORDS_IN_MEMORY) {\n            return newCombinedEmployees.slice(newCombinedEmployees.length - MAX_RECORDS_IN_MEMORY);\n          }\n          return newCombinedEmployees;\n        });\n        setHasMoreState(!data.last);\n        setCurrentPage(pageToFetch + 1);\n      } else {\n        setHasMoreState(false);\n        if (pageToFetch === 0) {\n          setEmployees([]);\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch employees:\", error);\n      // More specific error handling for axios if needed\n      if (axios.isAxiosError(error)) {\n        var _error$response;\n        console.error(\"Axios error details:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      }\n      setHasMoreState(false);\n    } finally {\n      setIsLoadingState(false);\n    }\n  }, []); // Empty dependency array: fetchEmployeesAPI is now stable.\n\n  // useEffect for the initial data load.\n  useEffect(() => {\n    setEmployees([]);\n    setCurrentPage(0);\n    setHasMoreState(true);\n    setIsLoadingState(false);\n    fetchEmployeesAPI(0);\n  }, [fetchEmployeesAPI]);\n\n  // This function is called by the `next` prop of `InfiniteScroll`\n  const loadMoreEmployees = () => {\n    if (!isLoadingRef.current && hasMoreRef.current) {\n      fetchEmployeesAPI(currentPage);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: styles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"employee-list-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Employee Directory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        dataLength: employees.length,\n        next: loadMoreEmployees,\n        hasMore: hasMoreState,\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loader\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Loading more employees...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 19\n        }, this),\n        endMessage: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: 'center'\n          },\n          className: \"end-message\",\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"You've reached the end of the list!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this),\n        children: employees.length > 0 ? employees.map(employee => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"employee-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [employee.firstName, \" \", employee.lastName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"ID:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 20\n            }, this), \" \", employee.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Birth Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 20\n            }, this), \" \", employee.birthDate ? new Date(employee.birthDate).toLocaleDateString() : 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 17\n          }, this)]\n        }, employee.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }, this)) : !isLoadingState && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"no-employees\",\n          children: hasMoreState ? \"Fetching initial data...\" : \"No employees found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), isLoadingState && employees.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Loading initial employees...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(EmployeeList, \"nU0ffWbEaSXSc+qvKXjlN7zleI4=\");\n_c = EmployeeList;\nexport default EmployeeList;\nvar _c;\n$RefreshReg$(_c, \"EmployeeList\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","InfiniteScroll","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","PAGE_SIZE","MAX_RECORDS_IN_MEMORY","styles","EmployeeList","_s","employees","setEmployees","isLoadingState","setIsLoadingState","hasMoreState","setHasMoreState","currentPage","setCurrentPage","isLoadingRef","hasMoreRef","current","fetchEmployeesAPI","pageToFetch","response","get","params","page","size","data","content","length","prevEmployees","newCombinedEmployees","slice","last","error","console","isAxiosError","_error$response","message","loadMoreEmployees","children","fileName","_jsxFileName","lineNumber","columnNumber","className","dataLength","next","hasMore","loader","endMessage","style","textAlign","map","employee","firstName","lastName","id","birthDate","Date","toLocaleDateString","_c","$RefreshReg$"],"sources":["/Users/mak/Documents/code/crud-springboot-reactjs-docker/react-front-end/src/Components/EmployeeList.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport axios from 'axios'; // Import axios\n// Assuming you have a CSS file for styling, e.g., EmployeeList.css\n// import './EmployeeList.css';\n\nconst PAGE_SIZE = 10; // Define page size, should align with backend pagination\nconst MAX_RECORDS_IN_MEMORY = 500; // Maximum number of records to keep in memory/on page\n\n// Placeholder for CSS styles if not using a separate file\nconst styles = `\n.employee-list-container {\n  max-width: 900px;\n  margin: 30px auto;\n  padding: 25px;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background-color: #f4f7f6;\n  border-radius: 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n}\n\n.employee-list-container h1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 25px;\n}\n\n.employee-card {\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  padding: 20px;\n  margin-bottom: 20px;\n  background-color: #ffffff;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);\n  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n}\n\n.employee-card:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n}\n\n.employee-card h3 {\n  margin-top: 0;\n  color: #0056b3;\n  margin-bottom: 10px;\n}\n\n.employee-card p {\n  margin: 8px 0;\n  color: #555;\n  font-size: 0.95em;\n}\n\n.loader,\n.end-message,\n.no-employees {\n  padding: 25px;\n  text-align: center;\n  color: #666;\n  font-style: italic;\n}\n\n.no-employees {\n  font-weight: bold;\n}\n`;\n\nfunction EmployeeList() {\n  const [employees, setEmployees] = useState([]);\n  // Renamed state variables to avoid confusion with refs\n  const [isLoadingState, setIsLoadingState] = useState(false);\n  const [hasMoreState, setHasMoreState] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0); // Tracks the *next* page to fetch\n\n  // Refs to hold the latest values of isLoading and hasMore.\n  const isLoadingRef = useRef(isLoadingState);\n  const hasMoreRef = useRef(hasMoreState);\n\n  // Keep refs synchronized with their respective state variables.\n  useEffect(() => {\n    isLoadingRef.current = isLoadingState;\n  }, [isLoadingState]);\n\n  useEffect(() => {\n    hasMoreRef.current = hasMoreState;\n  }, [hasMoreState]);\n\n  // useCallback ensures fetchEmployeesAPI has a stable reference across renders.\n  const fetchEmployeesAPI = useCallback(async (pageToFetch) => {\n    // Guard: Do not fetch if already loading, or if it's not the first page and no more data exists.\n    if (isLoadingRef.current || (pageToFetch > 0 && !hasMoreRef.current)) {\n      return;\n    }\n\n    setIsLoadingState(true);\n\n    try {\n      // Using axios for the API call\n      const response = await axios.get(`http://localhost:6868/api/employees`, {\n        params: {\n          page: pageToFetch,\n          size: PAGE_SIZE\n        }\n      });\n      \n      // With axios, the response data is directly available in response.data\n      const data = response.data; // This is the Slice<EmployeeDto> object\n\n      if (data.content && data.content.length > 0) {\n        setEmployees(prevEmployees => {\n          // Combine new data with previous data\n          const newCombinedEmployees = pageToFetch === 0 ? data.content : [...prevEmployees, ...data.content];\n          \n          // If the combined length exceeds MAX_RECORDS_IN_MEMORY, slice to keep only the latest records\n          if (newCombinedEmployees.length > MAX_RECORDS_IN_MEMORY) {\n            return newCombinedEmployees.slice(newCombinedEmployees.length - MAX_RECORDS_IN_MEMORY);\n          }\n          return newCombinedEmployees;\n        });\n        setHasMoreState(!data.last);\n        setCurrentPage(pageToFetch + 1);\n      } else {\n        setHasMoreState(false);\n        if (pageToFetch === 0) {\n            setEmployees([]);\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch employees:\", error);\n      // More specific error handling for axios if needed\n      if (axios.isAxiosError(error)) {\n        console.error(\"Axios error details:\", error.response?.data || error.message);\n      }\n      setHasMoreState(false);\n    } finally {\n      setIsLoadingState(false);\n    }\n  }, []); // Empty dependency array: fetchEmployeesAPI is now stable.\n\n  // useEffect for the initial data load.\n  useEffect(() => {\n    setEmployees([]);\n    setCurrentPage(0);\n    setHasMoreState(true);\n    setIsLoadingState(false); \n    \n    fetchEmployeesAPI(0);\n  }, [fetchEmployeesAPI]);\n\n  // This function is called by the `next` prop of `InfiniteScroll`\n  const loadMoreEmployees = () => {\n    if (!isLoadingRef.current && hasMoreRef.current) {\n      fetchEmployeesAPI(currentPage);\n    }\n  };\n\n  return (\n    <>\n      <style>{styles}</style>\n      <div className=\"employee-list-container\">\n        <h1>Employee Directory</h1>\n        <InfiniteScroll\n          dataLength={employees.length}\n          next={loadMoreEmployees}\n          hasMore={hasMoreState}\n          loader={<div className=\"loader\"><h4>Loading more employees...</h4></div>}\n          endMessage={\n            <p style={{ textAlign: 'center' }} className=\"end-message\">\n              <b>You've reached the end of the list!</b>\n            </p>\n          }\n        >\n          {employees.length > 0 ? (\n            employees.map(employee => (\n              <div key={employee.id} className=\"employee-card\">\n                <h3>{employee.firstName} {employee.lastName}</h3>\n                <p><strong>ID:</strong> {employee.id}</p>\n                <p><strong>Birth Date:</strong> {employee.birthDate ? new Date(employee.birthDate).toLocaleDateString() : 'N/A'}</p>\n              </div>\n            ))\n          ) : (\n            !isLoadingState && (\n              <p className=\"no-employees\">\n                {hasMoreState ? \"Fetching initial data...\" : \"No employees found.\"}\n              </p>\n            )\n          )}\n        </InfiniteScroll>\n        {isLoadingState && employees.length === 0 && (\n          <div className=\"loader\"><h4>Loading initial employees...</h4></div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default EmployeeList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}