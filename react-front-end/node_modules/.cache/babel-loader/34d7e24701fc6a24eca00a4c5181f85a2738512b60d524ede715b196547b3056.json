{"ast":null,"code":"var _jsxFileName = \"/Users/mak/Documents/code/crud-springboot-reactjs-docker/react-front-end/src/Components/EmployeeList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport './EmployeeList.css'; // Optional: for styling\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAGE_SIZE = 100; // Should match or be compatible with backend's default/request size\n\nfunction EmployeeList() {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0); // Tracks the current page number to fetch\n\n  const fetchEmployees = pageToFetch => {\n    axios.get(`http://localhost:6868/api/employees?page=${pageToFetch}&size=${PAGE_SIZE}`).then(data => {\n      if (data.content && data.content.length > 0) {\n        setEmployees(prevEmployees => [...prevEmployees, ...data.content]);\n        setHasMore(!data.last); // 'last' is true if it's the last slice\n        setCurrentPage(pageToFetch + 1); // Increment for the next fetch\n      } else {\n        setHasMore(false); // No more content or empty slice received\n      }\n    }).catch(err => {\n      console.error(\"Failed to fetch employees:\", err);\n      setHasMore(false); // Stop trying to fetch on error});\n    }).finally(setIsLoading(false));\n  };\n\n  // Initial data load when component mounts\n  useEffect(() => {\n    // Reset state for a clean load, especially if this component could be re-mounted with filters, etc.\n    setEmployees([]);\n    setCurrentPage(0);\n    setHasMore(true); // Assume there's data initially\n    // Fetch initial batch\n    fetchEmployees(0); // Fetch the first page (page 0)\n  }, [isLoading]); // Rerun if fetchEmployees definition changes (though it shouldn't often with useCallback)\n\n  const loadMoreEmployees = () => {\n    if (!isLoading && hasMore) {\n      fetchEmployees(currentPage);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"employee-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Employee Directory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: employees.length // This is important to prevent fetching too often\n      ,\n      next: loadMoreEmployees // Function to call when more data needs to be loaded\n      ,\n      hasMore: hasMore // Boolean indicating if there is more data to load\n      ,\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Loading more employees...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 25\n      }, this),\n      endMessage: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        className: \"end-message\",\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"You've reached the end of the list!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)\n      // scrollThreshold=\"200px\" // Optional: Load when 200px from bottom\n      // scrollableTarget=\"scrollableDivId\" // Use if scrolling is within a specific div, not window\n      ,\n      children: employees.length > 0 ? employees.map(employee => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"employee-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [employee.firstName, \" \", employee.lastName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 32\n          }, this), \" \", employee.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Birth Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 32\n          }, this), \" \", employee.birthDate ? new Date(employee.birthDate).toLocaleDateString() : 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 29\n        }, this)]\n      }, employee.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }, this)) : !isLoading && !hasMore && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-employees\",\n        children: \"No employees found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 47\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(EmployeeList, \"bO45RkHNCqzpCTGPB/wgD7qtv68=\");\n_c = EmployeeList;\nexport default EmployeeList;\nvar _c;\n$RefreshReg$(_c, \"EmployeeList\");","map":{"version":3,"names":["React","useState","useEffect","InfiniteScroll","axios","jsxDEV","_jsxDEV","PAGE_SIZE","EmployeeList","_s","employees","setEmployees","isLoading","setIsLoading","hasMore","setHasMore","currentPage","setCurrentPage","fetchEmployees","pageToFetch","get","then","data","content","length","prevEmployees","last","catch","err","console","error","finally","loadMoreEmployees","className","children","fileName","_jsxFileName","lineNumber","columnNumber","dataLength","next","loader","endMessage","style","textAlign","map","employee","firstName","lastName","id","birthDate","Date","toLocaleDateString","_c","$RefreshReg$"],"sources":["/Users/mak/Documents/code/crud-springboot-reactjs-docker/react-front-end/src/Components/EmployeeList.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport './EmployeeList.css'; // Optional: for styling\nimport axios from 'axios';\n\nconst PAGE_SIZE = 100; // Should match or be compatible with backend's default/request size\n\nfunction EmployeeList() {\n    const [employees, setEmployees] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [hasMore, setHasMore] = useState(true);\n    const [currentPage, setCurrentPage] = useState(0); // Tracks the current page number to fetch\n\n    const fetchEmployees = (pageToFetch) => {\n        axios\n            .get(`http://localhost:6868/api/employees?page=${pageToFetch}&size=${PAGE_SIZE}`)\n            .then((data) => {\n                if (data.content && data.content.length > 0) {\n                    setEmployees(prevEmployees => [...prevEmployees, ...data.content]);\n                    setHasMore(!data.last); // 'last' is true if it's the last slice\n                    setCurrentPage(pageToFetch + 1); // Increment for the next fetch\n                } else {\n                    setHasMore(false); // No more content or empty slice received\n                }\n            })\n            .catch((err) => {\n                console.error(\"Failed to fetch employees:\", err);\n                setHasMore(false); // Stop trying to fetch on error});\n            }).finally(setIsLoading(false))\n    };\n\n    // Initial data load when component mounts\n    useEffect(() => {\n        // Reset state for a clean load, especially if this component could be re-mounted with filters, etc.\n        setEmployees([]);\n        setCurrentPage(0);\n        setHasMore(true); // Assume there's data initially\n        // Fetch initial batch\n        fetchEmployees(0); // Fetch the first page (page 0)\n    }, [isLoading]); // Rerun if fetchEmployees definition changes (though it shouldn't often with useCallback)\n\n\n    const loadMoreEmployees = () => {\n        if (!isLoading && hasMore) {\n            fetchEmployees(currentPage);\n        }\n    }\n\n    return (\n        <div className=\"employee-list-container\">\n            <h1>Employee Directory</h1>\n            <InfiniteScroll\n                dataLength={employees.length} // This is important to prevent fetching too often\n                next={loadMoreEmployees} // Function to call when more data needs to be loaded\n                hasMore={hasMore} // Boolean indicating if there is more data to load\n                loader={<div className=\"loader\"><h4>Loading more employees...</h4></div>}\n                endMessage={\n                    <p style={{ textAlign: 'center' }} className=\"end-message\">\n                        <b>You've reached the end of the list!</b>\n                    </p>\n                }\n            // scrollThreshold=\"200px\" // Optional: Load when 200px from bottom\n            // scrollableTarget=\"scrollableDivId\" // Use if scrolling is within a specific div, not window\n            >\n                {employees.length > 0 ? (\n                    employees.map(employee => (\n                        <div key={employee.id} className=\"employee-card\">\n                            <h3>{employee.firstName} {employee.lastName}</h3>\n                            <p><strong>ID:</strong> {employee.id}</p>\n                            <p><strong>Birth Date:</strong> {employee.birthDate ? new Date(employee.birthDate).toLocaleDateString() : 'N/A'}</p>\n                        </div>\n                    ))\n                ) : (\n                    !isLoading && !hasMore && <p className=\"no-employees\">No employees found.</p>\n                )}\n            </InfiniteScroll>\n        </div>\n    );\n}\n\nexport default EmployeeList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}