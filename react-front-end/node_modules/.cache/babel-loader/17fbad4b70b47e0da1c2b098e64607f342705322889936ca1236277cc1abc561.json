{"ast":null,"code":"var _jsxFileName = \"/Users/mak/Documents/code/crud-springboot-reactjs-docker/react-front-end/src/Components/EmployeeList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport axios from 'axios'; // Import axios\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PAGE_SIZE = 10; // Define page size, should align with backend pagination\nconst MAX_RECORDS_IN_MEMORY = 500; // Maximum number of records to keep in memory/on page\n\n// Placeholder for CSS styles if not using a separate file\nconst styles = `\n.employee-list-container {\n  max-width: 900px;\n  margin: 30px auto;\n  padding: 25px;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background-color: #f4f7f6;\n  border-radius: 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n}\n\n.employee-list-container h1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 25px;\n}\n\n.employee-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n  background-color: #ffffff;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);\n  border-radius: 8px; /* Apply to wrapper if table itself can't have rounded corners easily */\n  overflow: hidden; /* Ensures box-shadow and border-radius apply correctly */\n}\n\n.employee-table th,\n.employee-table td {\n  border: 1px solid #e0e0e0;\n  padding: 12px 15px;\n  text-align: left;\n  font-size: 0.95em;\n}\n\n.employee-table th {\n  background-color: #0056b3; /* Header background */\n  color: #ffffff; /* Header text color */\n  font-weight: 600;\n  position: sticky; /* Make header sticky */\n  top: 0; /* Stick to the top of the scrollable container if applicable */\n  z-index: 10;\n}\n\n.employee-table tbody tr:nth-child(even) {\n  background-color: #f9f9f9; /* Zebra striping for rows */\n}\n\n.employee-table tbody tr:hover {\n  background-color: #f1f1f1; /* Hover effect for rows */\n  transition: background-color 0.2s ease-in-out;\n}\n\n.employee-table td {\n  color: #333;\n}\n\n.loader,\n.end-message,\n.no-employees {\n  padding: 25px;\n  text-align: center;\n  color: #666;\n  font-style: italic;\n}\n\n.no-employees {\n  font-weight: bold;\n}\n`;\nfunction EmployeeList() {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [isLoadingState, setIsLoadingState] = useState(false);\n  const [hasMoreState, setHasMoreState] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0);\n  const isLoadingRef = useRef(isLoadingState);\n  const hasMoreRef = useRef(hasMoreState);\n  useEffect(() => {\n    // console.log('[REF_UPDATE] isLoadingRef updated to:', isLoadingState);\n    isLoadingRef.current = isLoadingState;\n  }, [isLoadingState]);\n  useEffect(() => {\n    // console.log('[REF_UPDATE] hasMoreRef updated to:', hasMoreState);\n    hasMoreRef.current = hasMoreState;\n  }, [hasMoreState]);\n  const fetchEmployeesAPI = useCallback(async pageToFetch => {\n    console.log(`[FETCH_API_CALLED] pageToFetch: ${pageToFetch}, isLoadingRef: ${isLoadingRef.current}, hasMoreRef (for page > 0): ${pageToFetch > 0 ? hasMoreRef.current : 'N/A'}`);\n    if (isLoadingRef.current || pageToFetch > 0 && !hasMoreRef.current) {\n      console.log(`[FETCH_API_GUARDED] Fetch skipped. isLoading: ${isLoadingRef.current}, page: ${pageToFetch}, hasMore (for page > 0): ${pageToFetch > 0 ? hasMoreRef.current : 'N/A'}`);\n      return;\n    }\n    console.log(`[FETCH_API_START] Setting isLoadingState to true for page: ${pageToFetch}`);\n    setIsLoadingState(true);\n    try {\n      console.log(`[FETCH_API_REQUEST] Requesting page: ${pageToFetch}`);\n      const response = await axios.get(`http://localhost:6868/api/employees`, {\n        params: {\n          page: pageToFetch,\n          size: PAGE_SIZE\n        }\n      });\n      const data = response.data;\n      console.log(`[FETCH_API_RESPONSE] Received data for page ${pageToFetch}:`, data);\n      if (data.content && data.content.length > 0) {\n        setEmployees(prevEmployees => {\n          const newCombinedEmployees = pageToFetch === 0 ? data.content : [...prevEmployees, ...data.content];\n          console.log(`[FETCH_API_SET_EMPLOYEES] Prev length: ${prevEmployees.length}, New content length: ${data.content.length}, Combined length before slice: ${newCombinedEmployees.length}`);\n          if (newCombinedEmployees.length > MAX_RECORDS_IN_MEMORY) {\n            const slicedEmployees = newCombinedEmployees.slice(newCombinedEmployees.length - MAX_RECORDS_IN_MEMORY);\n            console.log(`[FETCH_API_SET_EMPLOYEES] Sliced. New employees length: ${slicedEmployees.length}`);\n            return slicedEmployees;\n          }\n          console.log(`[FETCH_API_SET_EMPLOYEES] Not sliced. New employees length: ${newCombinedEmployees.length}`);\n          return newCombinedEmployees;\n        });\n        console.log(`[FETCH_API_SET_HAS_MORE] Setting hasMoreState to: ${!data.last} (data.last: ${data.last})`);\n        setHasMoreState(!data.last);\n        console.log(`[FETCH_API_SET_CURRENT_PAGE] Setting currentPage to: ${pageToFetch + 1}`);\n        setCurrentPage(pageToFetch + 1);\n      } else {\n        console.log(`[FETCH_API_NO_CONTENT] No content or empty content for page ${pageToFetch}. Setting hasMoreState to false.`);\n        setHasMoreState(false);\n        if (pageToFetch === 0) {\n          console.log(`[FETCH_API_NO_CONTENT] Initial fetch had no content. Clearing employees array.`);\n          setEmployees([]);\n        }\n      }\n    } catch (error) {\n      console.error(\"[FETCH_API_ERROR] Failed to fetch employees:\", error);\n      if (axios.isAxiosError(error)) {\n        var _error$response;\n        console.error(\"[FETCH_API_ERROR] Axios error details:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      }\n      console.log(\"[FETCH_API_ERROR] Setting hasMoreState to false due to error.\");\n      setHasMoreState(false);\n    } finally {\n      console.log(`[FETCH_API_FINALLY] Setting isLoadingState to false for page: ${pageToFetch}`);\n      setIsLoadingState(false);\n    }\n  }, []); // Keep dependency array empty for stable fetchEmployeesAPI reference\n\n  useEffect(() => {\n    console.log(\"[INITIAL_LOAD_EFFECT] Component mounted or fetchEmployeesAPI changed. Resetting state and fetching initial data.\");\n    setEmployees([]);\n    setCurrentPage(0);\n    setHasMoreState(true);\n    setIsLoadingState(false); // Ensure isLoading is false before initial fetch\n    fetchEmployeesAPI(0); // Fetch page 0\n  }, [fetchEmployeesAPI]); // Runs once on mount due to stable fetchEmployeesAPI\n\n  const loadMoreEmployees = () => {\n    console.log(`[LOAD_MORE_CALLED] isLoadingRef: ${isLoadingRef.current}, hasMoreRef: ${hasMoreRef.current}, currentPage (next page to fetch): ${currentPage}`);\n    if (!isLoadingRef.current && hasMoreRef.current) {\n      fetchEmployeesAPI(currentPage);\n    } else {\n      console.log(`[LOAD_MORE_SKIPPED] Conditions not met. isLoading: ${isLoadingRef.current}, hasMore: ${hasMoreRef.current}`);\n    }\n  };\n\n  // console.log(`[RENDER] isLoadingState: ${isLoadingState}, hasMoreState: ${hasMoreState}, employees.length: ${employees.length}, currentPage: ${currentPage}`);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: styles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"employee-list-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Employee Directory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        dataLength: employees.length,\n        next: loadMoreEmployees,\n        hasMore: hasMoreState // This prop tells InfiniteScroll whether to keep calling 'next'\n        ,\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loader\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Loading more employees...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 19\n        }, this),\n        endMessage: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: 'center'\n          },\n          className: \"end-message\",\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"You've reached the end of the list!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"employee-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"First Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Last Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Birth Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.firstName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.lastName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.birthDate ? new Date(employee.birthDate).toLocaleDateString() : 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 19\n              }, this)]\n            }, employee.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), !isLoadingState && employees.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-employees\",\n        children: hasMoreState ? \"Fetching initial data...\" : \"No employees found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this), isLoadingState && employees.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Loading initial employees...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(EmployeeList, \"nU0ffWbEaSXSc+qvKXjlN7zleI4=\");\n_c = EmployeeList;\nexport default EmployeeList;\nvar _c;\n$RefreshReg$(_c, \"EmployeeList\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","InfiniteScroll","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","PAGE_SIZE","MAX_RECORDS_IN_MEMORY","styles","EmployeeList","_s","employees","setEmployees","isLoadingState","setIsLoadingState","hasMoreState","setHasMoreState","currentPage","setCurrentPage","isLoadingRef","hasMoreRef","current","fetchEmployeesAPI","pageToFetch","console","log","response","get","params","page","size","data","content","length","prevEmployees","newCombinedEmployees","slicedEmployees","slice","last","error","isAxiosError","_error$response","message","loadMoreEmployees","children","fileName","_jsxFileName","lineNumber","columnNumber","className","dataLength","next","hasMore","loader","endMessage","style","textAlign","map","employee","id","firstName","lastName","birthDate","Date","toLocaleDateString","_c","$RefreshReg$"],"sources":["/Users/mak/Documents/code/crud-springboot-reactjs-docker/react-front-end/src/Components/EmployeeList.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport axios from 'axios'; // Import axios\n\nconst PAGE_SIZE = 10; // Define page size, should align with backend pagination\nconst MAX_RECORDS_IN_MEMORY = 500; // Maximum number of records to keep in memory/on page\n\n// Placeholder for CSS styles if not using a separate file\nconst styles = `\n.employee-list-container {\n  max-width: 900px;\n  margin: 30px auto;\n  padding: 25px;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background-color: #f4f7f6;\n  border-radius: 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n}\n\n.employee-list-container h1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 25px;\n}\n\n.employee-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n  background-color: #ffffff;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);\n  border-radius: 8px; /* Apply to wrapper if table itself can't have rounded corners easily */\n  overflow: hidden; /* Ensures box-shadow and border-radius apply correctly */\n}\n\n.employee-table th,\n.employee-table td {\n  border: 1px solid #e0e0e0;\n  padding: 12px 15px;\n  text-align: left;\n  font-size: 0.95em;\n}\n\n.employee-table th {\n  background-color: #0056b3; /* Header background */\n  color: #ffffff; /* Header text color */\n  font-weight: 600;\n  position: sticky; /* Make header sticky */\n  top: 0; /* Stick to the top of the scrollable container if applicable */\n  z-index: 10;\n}\n\n.employee-table tbody tr:nth-child(even) {\n  background-color: #f9f9f9; /* Zebra striping for rows */\n}\n\n.employee-table tbody tr:hover {\n  background-color: #f1f1f1; /* Hover effect for rows */\n  transition: background-color 0.2s ease-in-out;\n}\n\n.employee-table td {\n  color: #333;\n}\n\n.loader,\n.end-message,\n.no-employees {\n  padding: 25px;\n  text-align: center;\n  color: #666;\n  font-style: italic;\n}\n\n.no-employees {\n  font-weight: bold;\n}\n`;\n\nfunction EmployeeList() {\n  const [employees, setEmployees] = useState([]);\n  const [isLoadingState, setIsLoadingState] = useState(false);\n  const [hasMoreState, setHasMoreState] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0);\n\n  const isLoadingRef = useRef(isLoadingState);\n  const hasMoreRef = useRef(hasMoreState);\n\n  useEffect(() => {\n    // console.log('[REF_UPDATE] isLoadingRef updated to:', isLoadingState);\n    isLoadingRef.current = isLoadingState;\n  }, [isLoadingState]);\n\n  useEffect(() => {\n    // console.log('[REF_UPDATE] hasMoreRef updated to:', hasMoreState);\n    hasMoreRef.current = hasMoreState;\n  }, [hasMoreState]);\n\n  const fetchEmployeesAPI = useCallback(async (pageToFetch) => {\n    console.log(`[FETCH_API_CALLED] pageToFetch: ${pageToFetch}, isLoadingRef: ${isLoadingRef.current}, hasMoreRef (for page > 0): ${pageToFetch > 0 ? hasMoreRef.current : 'N/A'}`);\n    if (isLoadingRef.current || (pageToFetch > 0 && !hasMoreRef.current)) {\n      console.log(`[FETCH_API_GUARDED] Fetch skipped. isLoading: ${isLoadingRef.current}, page: ${pageToFetch}, hasMore (for page > 0): ${pageToFetch > 0 ? hasMoreRef.current : 'N/A'}`);\n      return;\n    }\n    \n    console.log(`[FETCH_API_START] Setting isLoadingState to true for page: ${pageToFetch}`);\n    setIsLoadingState(true);\n\n    try {\n      console.log(`[FETCH_API_REQUEST] Requesting page: ${pageToFetch}`);\n      const response = await axios.get(`http://localhost:6868/api/employees`, {\n        params: {\n          page: pageToFetch,\n          size: PAGE_SIZE\n        }\n      });\n      const data = response.data;\n      console.log(`[FETCH_API_RESPONSE] Received data for page ${pageToFetch}:`, data);\n\n      if (data.content && data.content.length > 0) {\n        setEmployees(prevEmployees => {\n          const newCombinedEmployees = pageToFetch === 0 ? data.content : [...prevEmployees, ...data.content];\n          console.log(`[FETCH_API_SET_EMPLOYEES] Prev length: ${prevEmployees.length}, New content length: ${data.content.length}, Combined length before slice: ${newCombinedEmployees.length}`);\n          if (newCombinedEmployees.length > MAX_RECORDS_IN_MEMORY) {\n            const slicedEmployees = newCombinedEmployees.slice(newCombinedEmployees.length - MAX_RECORDS_IN_MEMORY);\n            console.log(`[FETCH_API_SET_EMPLOYEES] Sliced. New employees length: ${slicedEmployees.length}`);\n            return slicedEmployees;\n          }\n          console.log(`[FETCH_API_SET_EMPLOYEES] Not sliced. New employees length: ${newCombinedEmployees.length}`);\n          return newCombinedEmployees;\n        });\n        console.log(`[FETCH_API_SET_HAS_MORE] Setting hasMoreState to: ${!data.last} (data.last: ${data.last})`);\n        setHasMoreState(!data.last);\n        console.log(`[FETCH_API_SET_CURRENT_PAGE] Setting currentPage to: ${pageToFetch + 1}`);\n        setCurrentPage(pageToFetch + 1);\n      } else {\n        console.log(`[FETCH_API_NO_CONTENT] No content or empty content for page ${pageToFetch}. Setting hasMoreState to false.`);\n        setHasMoreState(false);\n        if (pageToFetch === 0) {\n            console.log(`[FETCH_API_NO_CONTENT] Initial fetch had no content. Clearing employees array.`);\n            setEmployees([]);\n        }\n      }\n    } catch (error) {\n      console.error(\"[FETCH_API_ERROR] Failed to fetch employees:\", error);\n      if (axios.isAxiosError(error)) {\n        console.error(\"[FETCH_API_ERROR] Axios error details:\", error.response?.data || error.message);\n      }\n      console.log(\"[FETCH_API_ERROR] Setting hasMoreState to false due to error.\");\n      setHasMoreState(false);\n    } finally {\n      console.log(`[FETCH_API_FINALLY] Setting isLoadingState to false for page: ${pageToFetch}`);\n      setIsLoadingState(false);\n    }\n  }, []); // Keep dependency array empty for stable fetchEmployeesAPI reference\n\n  useEffect(() => {\n    console.log(\"[INITIAL_LOAD_EFFECT] Component mounted or fetchEmployeesAPI changed. Resetting state and fetching initial data.\");\n    setEmployees([]);\n    setCurrentPage(0);\n    setHasMoreState(true);\n    setIsLoadingState(false); // Ensure isLoading is false before initial fetch\n    fetchEmployeesAPI(0); // Fetch page 0\n  }, [fetchEmployeesAPI]); // Runs once on mount due to stable fetchEmployeesAPI\n\n  const loadMoreEmployees = () => {\n    console.log(`[LOAD_MORE_CALLED] isLoadingRef: ${isLoadingRef.current}, hasMoreRef: ${hasMoreRef.current}, currentPage (next page to fetch): ${currentPage}`);\n    if (!isLoadingRef.current && hasMoreRef.current) {\n      fetchEmployeesAPI(currentPage);\n    } else {\n      console.log(`[LOAD_MORE_SKIPPED] Conditions not met. isLoading: ${isLoadingRef.current}, hasMore: ${hasMoreRef.current}`);\n    }\n  };\n\n  // console.log(`[RENDER] isLoadingState: ${isLoadingState}, hasMoreState: ${hasMoreState}, employees.length: ${employees.length}, currentPage: ${currentPage}`);\n\n  return (\n    <>\n      <style>{styles}</style>\n      <div className=\"employee-list-container\">\n        <h1>Employee Directory</h1>\n        <InfiniteScroll\n          dataLength={employees.length}\n          next={loadMoreEmployees}\n          hasMore={hasMoreState} // This prop tells InfiniteScroll whether to keep calling 'next'\n          loader={<div className=\"loader\"><h4>Loading more employees...</h4></div>}\n          endMessage={\n            <p style={{ textAlign: 'center' }} className=\"end-message\">\n              <b>You've reached the end of the list!</b>\n            </p>\n          }\n        >\n          <table className=\"employee-table\">\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>First Name</th>\n                <th>Last Name</th>\n                <th>Birth Date</th>\n              </tr>\n            </thead>\n            <tbody>\n              {employees.map(employee => (\n                <tr key={employee.id}>\n                  <td>{employee.id}</td>\n                  <td>{employee.firstName}</td>\n                  <td>{employee.lastName}</td>\n                  <td>{employee.birthDate ? new Date(employee.birthDate).toLocaleDateString() : 'N/A'}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </InfiniteScroll>\n        {!isLoadingState && employees.length === 0 && (\n          <p className=\"no-employees\">\n            {hasMoreState ? \"Fetching initial data...\" : \"No employees found.\"}\n          </p>\n        )}\n        {isLoadingState && employees.length === 0 && (\n          <div className=\"loader\"><h4>Loading initial employees...</h4></div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default EmployeeList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}