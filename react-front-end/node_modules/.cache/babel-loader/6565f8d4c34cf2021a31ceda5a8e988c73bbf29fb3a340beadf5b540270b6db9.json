{"ast":null,"code":"var _jsxFileName = \"/Users/mak/Documents/code/crud-springboot-reactjs-docker/react-front-end/src/Components/EmployeeList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PAGE_SIZE = 10;\nconst MAX_RECORDS_IN_MEMORY = 50; // Reduced for easier testing of memory limit\n// const MAX_RECORDS_IN_MEMORY = 500;\n\nconst styles = `\n.employee-list-container {\n  max-width: 900px;\n  margin: 30px auto;\n  padding: 25px;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background-color: #f4f7f6;\n  border-radius: 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n}\n.employee-list-container h1 { text-align: center; color: #333; margin-bottom: 25px; }\n.employee-table { width: 100%; border-collapse: collapse; margin-top: 20px; background-color: #ffffff; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06); border-radius: 8px; overflow: hidden; }\n.employee-table th, .employee-table td { border: 1px solid #e0e0e0; padding: 12px 15px; text-align: left; font-size: 0.95em; }\n.employee-table th { background-color: #0056b3; color: #ffffff; font-weight: 600; position: sticky; top: 0; z-index: 10; }\n.employee-table tbody tr:nth-child(even) { background-color: #f9f9f9; }\n.employee-table tbody tr:hover { background-color: #f1f1f1; transition: background-color 0.2s ease-in-out; }\n.employee-table td { color: #333; }\n.loader, .end-message, .no-employees, .pull-down-message { padding: 25px; text-align: center; color: #666; font-style: italic; }\n.no-employees { font-weight: bold; }\n`;\nfunction EmployeeList() {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [isLoadingNext, setIsLoadingNext] = useState(false);\n  const [hasNextState, setHasNextState] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [isLoadingPrevious, setIsLoadingPrevious] = useState(false);\n  const [hasPreviousState, setHasPreviousState] = useState(false);\n  const [firstPageInMemory, setFirstPageInMemory] = useState(0);\n  const [totalItemsFetchedSoFar, setTotalItemsFetchedSoFar] = useState(0);\n  const isLoadingNextRef = useRef(isLoadingNext);\n  const isLoadingPreviousRef = useRef(isLoadingPrevious);\n  useEffect(() => {\n    isLoadingNextRef.current = isLoadingNext;\n  }, [isLoadingNext]);\n  useEffect(() => {\n    isLoadingPreviousRef.current = isLoadingPrevious;\n  }, [isLoadingPrevious]);\n  const fetchNextEmployeesAPI = useCallback(async pageToFetch => {\n    // Use state values from closure for guards, they are dependencies of useCallback\n    if (isLoadingNextRef.current || pageToFetch > 0 && !hasNextState) {\n      console.log(`[FETCH_NEXT_GUARDED] page: ${pageToFetch}. isLoadingNextRef: ${isLoadingNextRef.current}, hasNextState (from closure): ${hasNextState}`);\n      return;\n    }\n    console.log(`[FETCH_NEXT_CALLED] pageToFetch: ${pageToFetch}`);\n    isLoadingNextRef.current = true;\n    setIsLoadingNext(true);\n    try {\n      const response = await axios.get(`http://localhost:8080/api/employees`, {\n        params: {\n          page: pageToFetch,\n          size: PAGE_SIZE\n        }\n      });\n      const data = response.data;\n      console.log(`[FETCH_NEXT_RESPONSE] page ${pageToFetch}:`, data);\n      if (data.content && data.content.length > 0) {\n        const newItems = data.content;\n        const newItemsCount = newItems.length;\n\n        // Calculate new state values based on current state (from closure) and new data\n        let calculatedFirstPageInMemory = firstPageInMemory; // Start with current value from closure\n        let updatedEmployeesArray;\n        if (pageToFetch === 0) {\n          // Initial load or reset\n          updatedEmployeesArray = newItems;\n          calculatedFirstPageInMemory = 0;\n          console.log(`[FETCH_NEXT_INIT_LOAD] Page 0. Resetting firstPageInMemory to 0.`);\n        } else {\n          // Use `employees` state directly for current items, it will be the most up-to-date from previous render\n          updatedEmployeesArray = [...employees, ...newItems];\n        }\n        if (updatedEmployeesArray.length > MAX_RECORDS_IN_MEMORY) {\n          const itemsToRemove = updatedEmployeesArray.length - MAX_RECORDS_IN_MEMORY;\n          updatedEmployeesArray = updatedEmployeesArray.slice(itemsToRemove);\n          // `firstPageInMemory` from closure is the page number of the *current* first item *before* this update\n          calculatedFirstPageInMemory = firstPageInMemory + Math.ceil(itemsToRemove / PAGE_SIZE);\n          console.log(`[FETCH_NEXT_MAX_RECORDS] Sliced from start. Items removed: ${itemsToRemove}. Calculated new firstPageInMemory: ${calculatedFirstPageInMemory}`);\n        }\n\n        // Set all states based on calculated values\n        setEmployees(updatedEmployeesArray);\n        setFirstPageInMemory(calculatedFirstPageInMemory);\n        setHasPreviousState(calculatedFirstPageInMemory > 0);\n        setTotalItemsFetchedSoFar(prevTotal => prevTotal + newItemsCount); // This is fine as it only depends on newItemsCount\n        setHasNextState(!data.last);\n        setCurrentPage(pageToFetch + 1);\n        console.log(`[FETCH_NEXT_SUCCESS] page ${pageToFetch}. New firstPageInMemory: ${calculatedFirstPageInMemory}, HasPrevious: ${calculatedFirstPageInMemory > 0}, HasNext: ${!data.last}, NextPageToFetch: ${pageToFetch + 1}`);\n      } else {\n        console.log(`[FETCH_NEXT_NO_CONTENT] page ${pageToFetch}. Setting hasNextState to false.`);\n        setHasNextState(false);\n        if (pageToFetch === 0) {\n          setEmployees([]);\n          setFirstPageInMemory(0); // Ensure reset\n          setHasPreviousState(false); // Ensure reset\n          setTotalItemsFetchedSoFar(0);\n        }\n      }\n    } catch (error) {\n      console.error(`[FETCH_NEXT_ERROR] page ${pageToFetch}:`, error);\n      setHasNextState(false);\n    } finally {\n      isLoadingNextRef.current = false;\n      setIsLoadingNext(false);\n      console.log(`[FETCH_NEXT_FINALLY] page ${pageToFetch}. isLoadingNextRef/State set to false.`);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [employees, firstPageInMemory, hasNextState]); // `employees` is needed to correctly combine with newItems before slicing.\n\n  const fetchPreviousEmployeesAPI = useCallback(async () => {\n    const pageToFetch = firstPageInMemory - 1;\n    // Use state values from closure for guards\n    if (isLoadingPreviousRef.current || pageToFetch < 0 || !hasPreviousState) {\n      console.log(`[FETCH_PREV_GUARDED] pageToFetch: ${pageToFetch}. isLoadingPreviousRef: ${isLoadingPreviousRef.current}, hasPreviousState (from closure): ${hasPreviousState}`);\n      return Promise.resolve();\n    }\n    console.log(`[FETCH_PREV_CALLED] pageToFetch: ${pageToFetch}`);\n    isLoadingPreviousRef.current = true;\n    setIsLoadingPrevious(true);\n    try {\n      const response = await axios.get(`http://localhost:6868/api/employees`, {\n        params: {\n          page: pageToFetch,\n          size: PAGE_SIZE\n        }\n      });\n      const data = response.data;\n      console.log(`[FETCH_PREV_RESPONSE] page ${pageToFetch}:`, data);\n      if (data.content && data.content.length > 0) {\n        const newItems = data.content;\n\n        // Calculate new state values\n        // Use `employees` state directly for current items\n        let updatedEmployeesArray = [...newItems, ...employees]; // Prepend\n\n        // When fetching previous, we add to the start. If MAX_RECORDS is hit, slice from the END.\n        if (updatedEmployeesArray.length > MAX_RECORDS_IN_MEMORY) {\n          updatedEmployeesArray = updatedEmployeesArray.slice(0, MAX_RECORDS_IN_MEMORY);\n          console.log(`[FETCH_PREV_MAX_RECORDS] Sliced from end. Kept ${MAX_RECORDS_IN_MEMORY} items.`);\n        }\n\n        // Set all states\n        setEmployees(updatedEmployeesArray);\n        setFirstPageInMemory(pageToFetch); // The new first page is the one we just fetched\n        setHasPreviousState(pageToFetch > 0); // There are previous pages if the fetched page > 0\n\n        console.log(`[FETCH_PREV_SUCCESS] page ${pageToFetch}. New firstPageInMemory: ${pageToFetch}, HasPrevious: ${pageToFetch > 0}`);\n      } else {\n        console.log(`[FETCH_PREV_NO_CONTENT] page ${pageToFetch}. Setting hasPreviousState to false.`);\n        setHasPreviousState(false); // No content means we've reached the actual beginning\n      }\n\n      return Promise.resolve();\n    } catch (error) {\n      console.error(`[FETCH_PREV_ERROR] page ${pageToFetch}:`, error);\n      setHasPreviousState(false);\n      return Promise.reject();\n    } finally {\n      isLoadingPreviousRef.current = false;\n      setIsLoadingPrevious(false);\n      console.log(`[FETCH_PREV_FINALLY] page ${pageToFetch}. isLoadingPreviousRef/State set to false.`);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [employees, firstPageInMemory, hasPreviousState]);\n  useEffect(() => {\n    console.log(\"[INITIAL_LOAD_EFFECT] Mounting. Resetting state.\");\n    setEmployees([]);\n    setCurrentPage(0);\n    setHasNextState(true);\n    setFirstPageInMemory(0);\n    setHasPreviousState(false);\n    setTotalItemsFetchedSoFar(0);\n    isLoadingNextRef.current = false;\n    setIsLoadingNext(false);\n    isLoadingPreviousRef.current = false;\n    setIsLoadingPrevious(false);\n    fetchNextEmployeesAPI(0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Empty deps for mount-only execution\n\n  const loadNextEmployees = () => {\n    // Use state values directly for guards\n    if (isLoadingNextRef.current || !hasNextState) {\n      console.log(`[LOAD_NEXT_SKIPPED] isLoadingNextRef: ${isLoadingNextRef.current}, hasNextState: ${hasNextState}`);\n      return;\n    }\n    console.log(`[LOAD_NEXT_CALLED] CurrentPageToFetch: ${currentPage}`);\n    fetchNextEmployeesAPI(currentPage);\n  };\n  const loadPreviousEmployees = async () => {\n    console.log(`[LOAD_PREVIOUS_TRIGGERED] by pull down. FirstPageInMemory: ${firstPageInMemory}, HasPreviousState: ${hasPreviousState}`);\n    // Use state values directly for guards\n    if (firstPageInMemory <= 0 || !hasPreviousState) {\n      // Ensure hasPreviousState is also checked\n      console.log(`[LOAD_PREVIOUS_SKIPPED] firstPageInMemory: ${firstPageInMemory} or hasPreviousState: ${hasPreviousState} is false.`);\n      if (hasPreviousState) setHasPreviousState(false); // Correct state if somehow inconsistent\n      return Promise.resolve();\n    }\n    return fetchPreviousEmployeesAPI();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: styles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"employee-list-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Employee Directory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        dataLength: totalItemsFetchedSoFar,\n        next: loadNextEmployees,\n        hasMore: hasNextState,\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loader\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Loading more employees...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 19\n        }, this),\n        endMessage: !hasNextState && employees.length > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: 'center'\n          },\n          className: \"end-message\",\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"You've reached the end of the list!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 15\n        }, this),\n        pullDownToRefresh: hasPreviousState,\n        refreshFunction: loadPreviousEmployees,\n        pullDownToRefreshContent: /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            textAlign: 'center'\n          },\n          className: \"pull-down-message\",\n          children: \"\\u2193 Pull down to load previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this),\n        releaseToRefreshContent: /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            textAlign: 'center'\n          },\n          className: \"pull-down-message\",\n          children: \"\\u2191 Release to load previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"employee-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"First Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 30\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Last Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Birth Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 67\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.firstName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.lastName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.birthDate ? new Date(employee.birthDate).toLocaleDateString() : 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 19\n              }, this)]\n            }, employee.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), !isLoadingNext && !isLoadingPrevious && employees.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-employees\",\n        children: !hasNextState && !hasPreviousState ? \"No employees found.\" : \"Scroll or pull down to load data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(EmployeeList, \"tV+NSLa4lBPZCp7LrxsaTuTo0yU=\");\n_c = EmployeeList;\nexport default EmployeeList;\nvar _c;\n$RefreshReg$(_c, \"EmployeeList\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","InfiniteScroll","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","PAGE_SIZE","MAX_RECORDS_IN_MEMORY","styles","EmployeeList","_s","employees","setEmployees","isLoadingNext","setIsLoadingNext","hasNextState","setHasNextState","currentPage","setCurrentPage","isLoadingPrevious","setIsLoadingPrevious","hasPreviousState","setHasPreviousState","firstPageInMemory","setFirstPageInMemory","totalItemsFetchedSoFar","setTotalItemsFetchedSoFar","isLoadingNextRef","isLoadingPreviousRef","current","fetchNextEmployeesAPI","pageToFetch","console","log","response","get","params","page","size","data","content","length","newItems","newItemsCount","calculatedFirstPageInMemory","updatedEmployeesArray","itemsToRemove","slice","Math","ceil","prevTotal","last","error","fetchPreviousEmployeesAPI","Promise","resolve","reject","loadNextEmployees","loadPreviousEmployees","children","fileName","_jsxFileName","lineNumber","columnNumber","className","dataLength","next","hasMore","loader","endMessage","style","textAlign","pullDownToRefresh","refreshFunction","pullDownToRefreshContent","releaseToRefreshContent","map","employee","id","firstName","lastName","birthDate","Date","toLocaleDateString","_c","$RefreshReg$"],"sources":["/Users/mak/Documents/code/crud-springboot-reactjs-docker/react-front-end/src/Components/EmployeeList.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport axios from 'axios';\n\nconst PAGE_SIZE = 10;\nconst MAX_RECORDS_IN_MEMORY = 50; // Reduced for easier testing of memory limit\n// const MAX_RECORDS_IN_MEMORY = 500;\n\n\nconst styles = `\n.employee-list-container {\n  max-width: 900px;\n  margin: 30px auto;\n  padding: 25px;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background-color: #f4f7f6;\n  border-radius: 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n}\n.employee-list-container h1 { text-align: center; color: #333; margin-bottom: 25px; }\n.employee-table { width: 100%; border-collapse: collapse; margin-top: 20px; background-color: #ffffff; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06); border-radius: 8px; overflow: hidden; }\n.employee-table th, .employee-table td { border: 1px solid #e0e0e0; padding: 12px 15px; text-align: left; font-size: 0.95em; }\n.employee-table th { background-color: #0056b3; color: #ffffff; font-weight: 600; position: sticky; top: 0; z-index: 10; }\n.employee-table tbody tr:nth-child(even) { background-color: #f9f9f9; }\n.employee-table tbody tr:hover { background-color: #f1f1f1; transition: background-color 0.2s ease-in-out; }\n.employee-table td { color: #333; }\n.loader, .end-message, .no-employees, .pull-down-message { padding: 25px; text-align: center; color: #666; font-style: italic; }\n.no-employees { font-weight: bold; }\n`;\n\nfunction EmployeeList() {\n  const [employees, setEmployees] = useState([]);\n  \n  const [isLoadingNext, setIsLoadingNext] = useState(false);\n  const [hasNextState, setHasNextState] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0); \n\n  const [isLoadingPrevious, setIsLoadingPrevious] = useState(false);\n  const [hasPreviousState, setHasPreviousState] = useState(false); \n  const [firstPageInMemory, setFirstPageInMemory] = useState(0); \n\n  const [totalItemsFetchedSoFar, setTotalItemsFetchedSoFar] = useState(0);\n\n  const isLoadingNextRef = useRef(isLoadingNext);\n  const isLoadingPreviousRef = useRef(isLoadingPrevious);\n\n  useEffect(() => { isLoadingNextRef.current = isLoadingNext; }, [isLoadingNext]);\n  useEffect(() => { isLoadingPreviousRef.current = isLoadingPrevious; }, [isLoadingPrevious]);\n\n  const fetchNextEmployeesAPI = useCallback(async (pageToFetch) => {\n    // Use state values from closure for guards, they are dependencies of useCallback\n    if (isLoadingNextRef.current || (pageToFetch > 0 && !hasNextState)) {\n      console.log(`[FETCH_NEXT_GUARDED] page: ${pageToFetch}. isLoadingNextRef: ${isLoadingNextRef.current}, hasNextState (from closure): ${hasNextState}`);\n      return;\n    }\n    console.log(`[FETCH_NEXT_CALLED] pageToFetch: ${pageToFetch}`);\n    isLoadingNextRef.current = true;\n    setIsLoadingNext(true);\n\n    try {\n      const response = await axios.get(`http://localhost:8080/api/employees`, {\n        params: { page: pageToFetch, size: PAGE_SIZE }\n      });\n      const data = response.data;\n      console.log(`[FETCH_NEXT_RESPONSE] page ${pageToFetch}:`, data);\n\n      if (data.content && data.content.length > 0) {\n        const newItems = data.content;\n        const newItemsCount = newItems.length;\n        \n        // Calculate new state values based on current state (from closure) and new data\n        let calculatedFirstPageInMemory = firstPageInMemory; // Start with current value from closure\n        let updatedEmployeesArray;\n\n        if (pageToFetch === 0) { // Initial load or reset\n            updatedEmployeesArray = newItems;\n            calculatedFirstPageInMemory = 0; \n            console.log(`[FETCH_NEXT_INIT_LOAD] Page 0. Resetting firstPageInMemory to 0.`);\n        } else {\n            // Use `employees` state directly for current items, it will be the most up-to-date from previous render\n            updatedEmployeesArray = [...employees, ...newItems];\n        }\n\n        if (updatedEmployeesArray.length > MAX_RECORDS_IN_MEMORY) {\n            const itemsToRemove = updatedEmployeesArray.length - MAX_RECORDS_IN_MEMORY;\n            updatedEmployeesArray = updatedEmployeesArray.slice(itemsToRemove);\n            // `firstPageInMemory` from closure is the page number of the *current* first item *before* this update\n            calculatedFirstPageInMemory = firstPageInMemory + Math.ceil(itemsToRemove / PAGE_SIZE);\n            console.log(`[FETCH_NEXT_MAX_RECORDS] Sliced from start. Items removed: ${itemsToRemove}. Calculated new firstPageInMemory: ${calculatedFirstPageInMemory}`);\n        }\n        \n        // Set all states based on calculated values\n        setEmployees(updatedEmployeesArray);\n        setFirstPageInMemory(calculatedFirstPageInMemory);\n        setHasPreviousState(calculatedFirstPageInMemory > 0);\n        setTotalItemsFetchedSoFar(prevTotal => prevTotal + newItemsCount); // This is fine as it only depends on newItemsCount\n        setHasNextState(!data.last);\n        setCurrentPage(pageToFetch + 1);\n\n        console.log(`[FETCH_NEXT_SUCCESS] page ${pageToFetch}. New firstPageInMemory: ${calculatedFirstPageInMemory}, HasPrevious: ${calculatedFirstPageInMemory > 0}, HasNext: ${!data.last}, NextPageToFetch: ${pageToFetch + 1}`);\n\n      } else {\n        console.log(`[FETCH_NEXT_NO_CONTENT] page ${pageToFetch}. Setting hasNextState to false.`);\n        setHasNextState(false);\n        if (pageToFetch === 0) {\n            setEmployees([]);\n            setFirstPageInMemory(0); // Ensure reset\n            setHasPreviousState(false); // Ensure reset\n            setTotalItemsFetchedSoFar(0);\n        }\n      }\n    } catch (error) {\n      console.error(`[FETCH_NEXT_ERROR] page ${pageToFetch}:`, error);\n      setHasNextState(false);\n    } finally {\n      isLoadingNextRef.current = false;\n      setIsLoadingNext(false);\n      console.log(`[FETCH_NEXT_FINALLY] page ${pageToFetch}. isLoadingNextRef/State set to false.`);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [employees, firstPageInMemory, hasNextState]); // `employees` is needed to correctly combine with newItems before slicing.\n\n  const fetchPreviousEmployeesAPI = useCallback(async () => {\n    const pageToFetch = firstPageInMemory - 1;\n    // Use state values from closure for guards\n    if (isLoadingPreviousRef.current || pageToFetch < 0 || !hasPreviousState) {\n      console.log(`[FETCH_PREV_GUARDED] pageToFetch: ${pageToFetch}. isLoadingPreviousRef: ${isLoadingPreviousRef.current}, hasPreviousState (from closure): ${hasPreviousState}`);\n      return Promise.resolve();\n    }\n    console.log(`[FETCH_PREV_CALLED] pageToFetch: ${pageToFetch}`);\n    isLoadingPreviousRef.current = true;\n    setIsLoadingPrevious(true);\n\n    try {\n      const response = await axios.get(`http://localhost:6868/api/employees`, {\n        params: { page: pageToFetch, size: PAGE_SIZE }\n      });\n      const data = response.data;\n      console.log(`[FETCH_PREV_RESPONSE] page ${pageToFetch}:`, data);\n\n      if (data.content && data.content.length > 0) {\n        const newItems = data.content;\n        \n        // Calculate new state values\n        // Use `employees` state directly for current items\n        let updatedEmployeesArray = [...newItems, ...employees]; // Prepend\n        \n        // When fetching previous, we add to the start. If MAX_RECORDS is hit, slice from the END.\n        if (updatedEmployeesArray.length > MAX_RECORDS_IN_MEMORY) {\n            updatedEmployeesArray = updatedEmployeesArray.slice(0, MAX_RECORDS_IN_MEMORY);\n            console.log(`[FETCH_PREV_MAX_RECORDS] Sliced from end. Kept ${MAX_RECORDS_IN_MEMORY} items.`);\n        }\n\n        // Set all states\n        setEmployees(updatedEmployeesArray);\n        setFirstPageInMemory(pageToFetch); // The new first page is the one we just fetched\n        setHasPreviousState(pageToFetch > 0); // There are previous pages if the fetched page > 0\n\n        console.log(`[FETCH_PREV_SUCCESS] page ${pageToFetch}. New firstPageInMemory: ${pageToFetch}, HasPrevious: ${pageToFetch > 0}`);\n      } else {\n        console.log(`[FETCH_PREV_NO_CONTENT] page ${pageToFetch}. Setting hasPreviousState to false.`);\n        setHasPreviousState(false); // No content means we've reached the actual beginning\n      }\n      return Promise.resolve();\n    } catch (error) {\n      console.error(`[FETCH_PREV_ERROR] page ${pageToFetch}:`, error);\n      setHasPreviousState(false); \n      return Promise.reject();\n    } finally {\n      isLoadingPreviousRef.current = false;\n      setIsLoadingPrevious(false);\n      console.log(`[FETCH_PREV_FINALLY] page ${pageToFetch}. isLoadingPreviousRef/State set to false.`);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [employees, firstPageInMemory, hasPreviousState]);\n\n\n  useEffect(() => {\n    console.log(\"[INITIAL_LOAD_EFFECT] Mounting. Resetting state.\");\n    setEmployees([]);\n    setCurrentPage(0);\n    setHasNextState(true);\n    setFirstPageInMemory(0);\n    setHasPreviousState(false);\n    setTotalItemsFetchedSoFar(0);\n    isLoadingNextRef.current = false;\n    setIsLoadingNext(false);\n    isLoadingPreviousRef.current = false;\n    setIsLoadingPrevious(false);\n    \n    fetchNextEmployeesAPI(0);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Empty deps for mount-only execution\n\n\n  const loadNextEmployees = () => {\n    // Use state values directly for guards\n    if (isLoadingNextRef.current || !hasNextState) {\n        console.log(`[LOAD_NEXT_SKIPPED] isLoadingNextRef: ${isLoadingNextRef.current}, hasNextState: ${hasNextState}`);\n        return;\n    }\n    console.log(`[LOAD_NEXT_CALLED] CurrentPageToFetch: ${currentPage}`);\n    fetchNextEmployeesAPI(currentPage);\n  };\n\n  const loadPreviousEmployees = async () => {\n    console.log(`[LOAD_PREVIOUS_TRIGGERED] by pull down. FirstPageInMemory: ${firstPageInMemory}, HasPreviousState: ${hasPreviousState}`);\n    // Use state values directly for guards\n    if (firstPageInMemory <= 0 || !hasPreviousState) { // Ensure hasPreviousState is also checked\n        console.log(`[LOAD_PREVIOUS_SKIPPED] firstPageInMemory: ${firstPageInMemory} or hasPreviousState: ${hasPreviousState} is false.`);\n        if(hasPreviousState) setHasPreviousState(false); // Correct state if somehow inconsistent\n        return Promise.resolve(); \n    }\n    return fetchPreviousEmployeesAPI();\n  };\n\n\n  return (\n    <>\n      <style>{styles}</style>\n      <div className=\"employee-list-container\">\n        <h1>Employee Directory</h1>\n        <InfiniteScroll\n          dataLength={totalItemsFetchedSoFar} \n          next={loadNextEmployees}\n          hasMore={hasNextState} \n          loader={<div className=\"loader\"><h4>Loading more employees...</h4></div>}\n          endMessage={\n            !hasNextState && employees.length > 0 && (\n              <p style={{ textAlign: 'center' }} className=\"end-message\">\n                <b>You've reached the end of the list!</b>\n              </p>\n            )\n          }\n          pullDownToRefresh={hasPreviousState} \n          refreshFunction={loadPreviousEmployees}\n          pullDownToRefreshContent={\n            <h3 style={{ textAlign: 'center' }} className=\"pull-down-message\">&#8595; Pull down to load previous</h3>\n          }\n          releaseToRefreshContent={\n            <h3 style={{ textAlign: 'center' }} className=\"pull-down-message\">&#8593; Release to load previous</h3>\n          }\n        >\n          <table className=\"employee-table\">\n            <thead>\n              <tr><th>ID</th><th>First Name</th><th>Last Name</th><th>Birth Date</th></tr>\n            </thead>\n            <tbody>\n              {employees.map(employee => (\n                <tr key={employee.id}>\n                  <td>{employee.id}</td>\n                  <td>{employee.firstName}</td>\n                  <td>{employee.lastName}</td>\n                  <td>{employee.birthDate ? new Date(employee.birthDate).toLocaleDateString() : 'N/A'}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </InfiniteScroll>\n        {!isLoadingNext && !isLoadingPrevious && employees.length === 0 && (\n          <p className=\"no-employees\">\n            {!hasNextState && !hasPreviousState ? \"No employees found.\" : \"Scroll or pull down to load data.\"}\n          </p>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default EmployeeList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}