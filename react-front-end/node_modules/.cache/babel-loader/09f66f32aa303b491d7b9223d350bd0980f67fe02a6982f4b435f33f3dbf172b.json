{"ast":null,"code":"var _jsxFileName = \"/Users/mak/Documents/code/crud-springboot-reactjs-docker/react-front-end/src/Components/EmployeeList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport axios from 'axios'; // Import axios\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PAGE_SIZE = 10; // Define page size, should align with backend pagination\nconst MAX_RECORDS_IN_MEMORY = 500; // Maximum number of records to keep in memory/on page\n\n// Placeholder for CSS styles if not using a separate file\nconst styles = `\n.employee-list-container {\n  max-width: 900px;\n  margin: 30px auto;\n  padding: 25px;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background-color: #f4f7f6;\n  border-radius: 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n}\n\n.employee-list-container h1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 25px;\n}\n\n/* Styles for the outer div of each employee (card-like) */\n.employee-card-div {\n  border: 1px solid #d1d5db; /* Tailwind gray-300 */\n  border-radius: 8px; /* Tailwind rounded-lg */\n  padding: 16px; /* Tailwind p-4 */\n  margin-bottom: 20px;\n  background-color: #ffffff; /* Tailwind bg-white */\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); /* Tailwind shadow-md */\n  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n}\n\n.employee-card-div:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); /* Tailwind shadow-lg */\n}\n\n/* Styles for the small table inside each employee card div */\n.employee-details-table {\n  width: 100%;\n  border-collapse: collapse; /* Removes double borders */\n}\n\n.employee-details-table th,\n.employee-details-table td {\n  padding: 8px 12px; /* Tailwind p-2 or p-3 equivalent */\n  text-align: left;\n  font-size: 0.9em; /* Slightly smaller font for details */\n  border-bottom: 1px solid #e5e7eb; /* Tailwind gray-200 for subtle row separation */\n}\n\n.employee-details-table th {\n  font-weight: 600; /* Tailwind font-semibold */\n  color: #4b5563; /* Tailwind gray-600 */\n  width: 30%; /* Give some fixed width to headers for alignment */\n}\n\n.employee-details-table td {\n  color: #1f2937; /* Tailwind gray-800 */\n}\n\n/* Remove border from the last row's cells in each table */\n.employee-details-table tr:last-child th,\n.employee-details-table tr:last-child td {\n  border-bottom: none;\n}\n\n\n.loader,\n.end-message,\n.no-employees {\n  padding: 25px;\n  text-align: center;\n  color: #666;\n  font-style: italic;\n}\n\n.no-employees {\n  font-weight: bold;\n}\n`;\nfunction EmployeeList() {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [isLoadingState, setIsLoadingState] = useState(false);\n  const [hasMoreState, setHasMoreState] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0);\n  const isLoadingRef = useRef(isLoadingState);\n  const hasMoreRef = useRef(hasMoreState); // To store the latest hasMoreState for fetchEmployeesAPI\n\n  useEffect(() => {\n    isLoadingRef.current = isLoadingState;\n  }, [isLoadingState]);\n\n  // Update hasMoreRef whenever hasMoreState changes\n  useEffect(() => {\n    hasMoreRef.current = hasMoreState;\n  }, [hasMoreState]);\n  const fetchEmployeesAPI = useCallback(async pageToFetch => {\n    // Use the ref for isLoading and the latest hasMoreState from the ref for the guard\n    if (isLoadingRef.current || pageToFetch > 0 && !hasMoreRef.current) {\n      console.log(`Fetch skipped: isLoading=${isLoadingRef.current}, pageToFetch=${pageToFetch}, hasMore=${hasMoreRef.current}`);\n      return;\n    }\n    console.log(`Fetching page: ${pageToFetch}`);\n    setIsLoadingState(true);\n    try {\n      const response = await axios.get(`http://localhost:6868/api/employees`, {\n        params: {\n          page: pageToFetch,\n          size: PAGE_SIZE\n        }\n      });\n      const data = response.data;\n      console.log(\"API Response data:\", data);\n      if (data.content && data.content.length > 0) {\n        setEmployees(prevEmployees => {\n          const newCombinedEmployees = pageToFetch === 0 ? data.content : [...prevEmployees, ...data.content];\n          if (newCombinedEmployees.length > MAX_RECORDS_IN_MEMORY) {\n            return newCombinedEmployees.slice(newCombinedEmployees.length - MAX_RECORDS_IN_MEMORY);\n          }\n          return newCombinedEmployees;\n        });\n        setHasMoreState(!data.last); // Set hasMore based on API response\n        setCurrentPage(pageToFetch + 1);\n      } else {\n        setHasMoreState(false); // No more content or empty array means no more data\n        if (pageToFetch === 0) {\n          setEmployees([]); // Clear if initial fetch is empty\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch employees:\", error);\n      if (axios.isAxiosError(error)) {\n        var _error$response;\n        console.error(\"Axios error details:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      }\n      setHasMoreState(false); // Stop trying on error\n    } finally {\n      setIsLoadingState(false);\n    }\n  }, []); // Empty dependency array makes fetchEmployeesAPI stable\n\n  useEffect(() => {\n    console.log(\"Initial effect: Resetting and fetching page 0\");\n    setEmployees([]);\n    setCurrentPage(0);\n    setHasMoreState(true); // Assume there's data initially\n    setIsLoadingState(false); // Ensure not starting in loading state\n    fetchEmployeesAPI(0);\n  }, [fetchEmployeesAPI]); // fetchEmployeesAPI is stable, so this runs once on mount\n\n  const loadMoreEmployees = () => {\n    // Use refs for guards here as well for consistency and to avoid stale closures\n    if (!isLoadingRef.current && hasMoreRef.current) {\n      console.log(`loadMoreEmployees called for page: ${currentPage}`);\n      fetchEmployeesAPI(currentPage);\n    } else {\n      console.log(`loadMoreEmployees skipped: isLoading=${isLoadingRef.current}, hasMore=${hasMoreRef.current}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: styles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"employee-list-container\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Employee Directory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        dataLength: employees.length // This is important for InfiniteScroll to know when to call next\n        ,\n        next: loadMoreEmployees,\n        hasMore: hasMoreState // Use the state variable directly\n        ,\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loader\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Loading more employees...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 19\n        }, this),\n        endMessage: !hasMoreState && employees.length > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: 'center'\n          },\n          className: \"end-message\",\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"You've reached the end of the list!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 18\n        }, this),\n        children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"employee-card-div\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"employee-details-table\",\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"ID:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: employee.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"First Name:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: employee.firstName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Last Name:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: employee.lastName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Birth Date:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: employee.birthDate ? new Date(employee.birthDate).toLocaleDateString() : 'N/A'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this)\n        }, employee.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), !isLoadingState && employees.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-employees\",\n        children: hasMoreState ? \"Fetching initial data...\" : \"No employees found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this), isLoadingState && employees.length === 0 && hasMoreState && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Loading initial employees...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 37\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(EmployeeList, \"nU0ffWbEaSXSc+qvKXjlN7zleI4=\");\n_c = EmployeeList;\nexport default EmployeeList;\nvar _c;\n$RefreshReg$(_c, \"EmployeeList\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","InfiniteScroll","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","PAGE_SIZE","MAX_RECORDS_IN_MEMORY","styles","EmployeeList","_s","employees","setEmployees","isLoadingState","setIsLoadingState","hasMoreState","setHasMoreState","currentPage","setCurrentPage","isLoadingRef","hasMoreRef","current","fetchEmployeesAPI","pageToFetch","console","log","response","get","params","page","size","data","content","length","prevEmployees","newCombinedEmployees","slice","last","error","isAxiosError","_error$response","message","loadMoreEmployees","children","fileName","_jsxFileName","lineNumber","columnNumber","className","dataLength","next","hasMore","loader","endMessage","style","textAlign","map","employee","id","firstName","lastName","birthDate","Date","toLocaleDateString","_c","$RefreshReg$"],"sources":["/Users/mak/Documents/code/crud-springboot-reactjs-docker/react-front-end/src/Components/EmployeeList.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport axios from 'axios'; // Import axios\n\nconst PAGE_SIZE = 10; // Define page size, should align with backend pagination\nconst MAX_RECORDS_IN_MEMORY = 500; // Maximum number of records to keep in memory/on page\n\n// Placeholder for CSS styles if not using a separate file\nconst styles = `\n.employee-list-container {\n  max-width: 900px;\n  margin: 30px auto;\n  padding: 25px;\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background-color: #f4f7f6;\n  border-radius: 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n}\n\n.employee-list-container h1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 25px;\n}\n\n/* Styles for the outer div of each employee (card-like) */\n.employee-card-div {\n  border: 1px solid #d1d5db; /* Tailwind gray-300 */\n  border-radius: 8px; /* Tailwind rounded-lg */\n  padding: 16px; /* Tailwind p-4 */\n  margin-bottom: 20px;\n  background-color: #ffffff; /* Tailwind bg-white */\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); /* Tailwind shadow-md */\n  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n}\n\n.employee-card-div:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); /* Tailwind shadow-lg */\n}\n\n/* Styles for the small table inside each employee card div */\n.employee-details-table {\n  width: 100%;\n  border-collapse: collapse; /* Removes double borders */\n}\n\n.employee-details-table th,\n.employee-details-table td {\n  padding: 8px 12px; /* Tailwind p-2 or p-3 equivalent */\n  text-align: left;\n  font-size: 0.9em; /* Slightly smaller font for details */\n  border-bottom: 1px solid #e5e7eb; /* Tailwind gray-200 for subtle row separation */\n}\n\n.employee-details-table th {\n  font-weight: 600; /* Tailwind font-semibold */\n  color: #4b5563; /* Tailwind gray-600 */\n  width: 30%; /* Give some fixed width to headers for alignment */\n}\n\n.employee-details-table td {\n  color: #1f2937; /* Tailwind gray-800 */\n}\n\n/* Remove border from the last row's cells in each table */\n.employee-details-table tr:last-child th,\n.employee-details-table tr:last-child td {\n  border-bottom: none;\n}\n\n\n.loader,\n.end-message,\n.no-employees {\n  padding: 25px;\n  text-align: center;\n  color: #666;\n  font-style: italic;\n}\n\n.no-employees {\n  font-weight: bold;\n}\n`;\n\nfunction EmployeeList() {\n  const [employees, setEmployees] = useState([]);\n  const [isLoadingState, setIsLoadingState] = useState(false);\n  const [hasMoreState, setHasMoreState] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0);\n\n  const isLoadingRef = useRef(isLoadingState);\n  const hasMoreRef = useRef(hasMoreState); // To store the latest hasMoreState for fetchEmployeesAPI\n\n  useEffect(() => {\n    isLoadingRef.current = isLoadingState;\n  }, [isLoadingState]);\n\n  // Update hasMoreRef whenever hasMoreState changes\n  useEffect(() => {\n    hasMoreRef.current = hasMoreState;\n  }, [hasMoreState]);\n\n  const fetchEmployeesAPI = useCallback(async (pageToFetch) => {\n    // Use the ref for isLoading and the latest hasMoreState from the ref for the guard\n    if (isLoadingRef.current || (pageToFetch > 0 && !hasMoreRef.current)) {\n      console.log(`Fetch skipped: isLoading=${isLoadingRef.current}, pageToFetch=${pageToFetch}, hasMore=${hasMoreRef.current}`);\n      return;\n    }\n    console.log(`Fetching page: ${pageToFetch}`);\n    setIsLoadingState(true);\n    try {\n      const response = await axios.get(`http://localhost:6868/api/employees`, {\n        params: {\n          page: pageToFetch,\n          size: PAGE_SIZE\n        }\n      });\n      const data = response.data;\n      console.log(\"API Response data:\", data);\n      if (data.content && data.content.length > 0) {\n        setEmployees(prevEmployees => {\n          const newCombinedEmployees = pageToFetch === 0 ? data.content : [...prevEmployees, ...data.content];\n          if (newCombinedEmployees.length > MAX_RECORDS_IN_MEMORY) {\n            return newCombinedEmployees.slice(newCombinedEmployees.length - MAX_RECORDS_IN_MEMORY);\n          }\n          return newCombinedEmployees;\n        });\n        setHasMoreState(!data.last); // Set hasMore based on API response\n        setCurrentPage(pageToFetch + 1);\n      } else {\n        setHasMoreState(false); // No more content or empty array means no more data\n        if (pageToFetch === 0) {\n            setEmployees([]); // Clear if initial fetch is empty\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch employees:\", error);\n      if (axios.isAxiosError(error)) {\n        console.error(\"Axios error details:\", error.response?.data || error.message);\n      }\n      setHasMoreState(false); // Stop trying on error\n    } finally {\n      setIsLoadingState(false);\n    }\n  }, []); // Empty dependency array makes fetchEmployeesAPI stable\n\n  useEffect(() => {\n    console.log(\"Initial effect: Resetting and fetching page 0\");\n    setEmployees([]);\n    setCurrentPage(0);\n    setHasMoreState(true); // Assume there's data initially\n    setIsLoadingState(false); // Ensure not starting in loading state\n    fetchEmployeesAPI(0);\n  }, [fetchEmployeesAPI]); // fetchEmployeesAPI is stable, so this runs once on mount\n\n  const loadMoreEmployees = () => {\n    // Use refs for guards here as well for consistency and to avoid stale closures\n    if (!isLoadingRef.current && hasMoreRef.current) {\n      console.log(`loadMoreEmployees called for page: ${currentPage}`);\n      fetchEmployeesAPI(currentPage);\n    } else {\n      console.log(`loadMoreEmployees skipped: isLoading=${isLoadingRef.current}, hasMore=${hasMoreRef.current}`);\n    }\n  };\n\n  return (\n    <>\n      <style>{styles}</style>\n      <div className=\"employee-list-container\"> {/* Main outer div */}\n        <h1>Employee Directory</h1>\n        <InfiniteScroll\n          dataLength={employees.length} // This is important for InfiniteScroll to know when to call next\n          next={loadMoreEmployees}\n          hasMore={hasMoreState} // Use the state variable directly\n          loader={<div className=\"loader\"><h4>Loading more employees...</h4></div>}\n          endMessage={\n            !hasMoreState && employees.length > 0 && (\n                 <p style={{ textAlign: 'center' }} className=\"end-message\">\n                    <b>You've reached the end of the list!</b>\n                 </p>\n            )\n          }\n        >\n          {/* Map employees to individual divs, each containing a small table */}\n          {employees.map(employee => (\n            <div key={employee.id} className=\"employee-card-div\">\n              <table className=\"employee-details-table\">\n                <tbody>\n                  <tr>\n                    <th>ID:</th>\n                    <td>{employee.id}</td>\n                  </tr>\n                  <tr>\n                    <th>First Name:</th>\n                    <td>{employee.firstName}</td>\n                  </tr>\n                  <tr>\n                    <th>Last Name:</th>\n                    <td>{employee.lastName}</td>\n                  </tr>\n                  <tr>\n                    <th>Birth Date:</th>\n                    <td>{employee.birthDate ? new Date(employee.birthDate).toLocaleDateString() : 'N/A'}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          ))}\n        </InfiniteScroll>\n        \n        {!isLoadingState && employees.length === 0 && (\n          <p className=\"no-employees\">\n            {hasMoreState ? \"Fetching initial data...\" : \"No employees found.\"}\n          </p>\n        )}\n        {/* This loader is for the very initial load if the list is empty and still loading */}\n        {isLoadingState && employees.length === 0 && hasMoreState && ( \n            <div className=\"loader\"><h4>Loading initial employees...</h4></div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default EmployeeList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}