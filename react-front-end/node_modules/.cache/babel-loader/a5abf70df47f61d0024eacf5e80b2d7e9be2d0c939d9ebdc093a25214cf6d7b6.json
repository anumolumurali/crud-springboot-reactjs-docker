{"ast":null,"code":"var _jsxFileName = \"/Users/mak/Documents/code/crud-springboot-reactjs-docker/react-front-end/src/Components/EmployeeList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport './EmployeeList.css'; // Optional: for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAGE_SIZE = 10; // Should match or be compatible with backend's default/request size\n\nfunction EmployeeList() {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0); // Tracks the current page number to fetch\n\n  const fetchEmployees = useCallback(async pageToFetch => {\n    if (isLoading) return; // Prevent multiple simultaneous fetches\n\n    setIsLoading(true);\n    try {\n      // Adjust the URL if your Spring Boot app runs on a different port or context path\n      const response = await fetch(`http://localhost:6868/api/employees?page=${pageToFetch}&size=${PAGE_SIZE}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json(); // This is a Slice<EmployeeDto>\n\n      if (data.content && data.content.length > 0) {\n        setEmployees(prevEmployees => [...prevEmployees, ...data.content]);\n        setHasMore(!data.last); // 'last' is true if it's the last slice\n        setCurrentPage(pageToFetch + 1); // Increment for the next fetch\n      } else {\n        setHasMore(false); // No more content or empty slice received\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch employees:\", error);\n      setHasMore(false); // Stop trying to fetch on error\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isLoading]); // Removed currentPage from dependencies to avoid potential issues with useCallback closure\n\n  // Initial data load when component mounts\n  useEffect(() => {\n    // Reset state for a clean load, especially if this component could be re-mounted with filters, etc.\n    setEmployees([]);\n    setCurrentPage(0);\n    setHasMore(true); // Assume there's data initially\n    // Fetch initial batch\n    fetchEmployees(0); // Fetch the first page (page 0)\n  }, [fetchEmployees]); // Rerun if fetchEmployees definition changes (though it shouldn't often with useCallback)\n\n  const loadMoreEmployees = () => {\n    if (!isLoading && hasMore) {\n      fetchEmployees(currentPage);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"employee-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Employee Directory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: employees.length // This is important to prevent fetching too often\n      ,\n      next: loadMoreEmployees // Function to call when more data needs to be loaded\n      ,\n      hasMore: hasMore // Boolean indicating if there is more data to load\n      ,\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Loading more employees...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this),\n      endMessage: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        className: \"end-message\",\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"You've reached the end of the list!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)\n      // scrollThreshold=\"200px\" // Optional: Load when 200px from bottom\n      // scrollableTarget=\"scrollableDivId\" // Use if scrolling is within a specific div, not window\n      ,\n      children: employees.length > 0 ? employees.map(employee => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"employee-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [employee.firstName, \" \", employee.lastName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 18\n          }, this), \" \", employee.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Birth Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 18\n          }, this), \" \", employee.birthDate ? new Date(employee.birthDate).toLocaleDateString() : 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this)]\n      }, employee.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this)) : !isLoading && !hasMore && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-employees\",\n        children: \"No employees found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(EmployeeList, \"AR4f/i1rRBd9atqu+FmUxXxs/3Q=\");\n_c = EmployeeList;\nexport default EmployeeList;\nvar _c;\n$RefreshReg$(_c, \"EmployeeList\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","InfiniteScroll","jsxDEV","_jsxDEV","PAGE_SIZE","EmployeeList","_s","employees","setEmployees","isLoading","setIsLoading","hasMore","setHasMore","currentPage","setCurrentPage","fetchEmployees","pageToFetch","response","fetch","ok","Error","status","data","json","content","length","prevEmployees","last","error","console","loadMoreEmployees","className","children","fileName","_jsxFileName","lineNumber","columnNumber","dataLength","next","loader","endMessage","style","textAlign","map","employee","firstName","lastName","id","birthDate","Date","toLocaleDateString","_c","$RefreshReg$"],"sources":["/Users/mak/Documents/code/crud-springboot-reactjs-docker/react-front-end/src/Components/EmployeeList.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport './EmployeeList.css'; // Optional: for styling\n\nconst PAGE_SIZE = 10; // Should match or be compatible with backend's default/request size\n\nfunction EmployeeList() {\n  const [employees, setEmployees] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0); // Tracks the current page number to fetch\n\n  const fetchEmployees = useCallback(async (pageToFetch) => {\n    if (isLoading) return; // Prevent multiple simultaneous fetches\n\n    setIsLoading(true);\n    try {\n      // Adjust the URL if your Spring Boot app runs on a different port or context path\n      const response = await fetch(`http://localhost:6868/api/employees?page=${pageToFetch}&size=${PAGE_SIZE}`);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json(); // This is a Slice<EmployeeDto>\n\n      if (data.content && data.content.length > 0) {\n        setEmployees(prevEmployees => [...prevEmployees, ...data.content]);\n        setHasMore(!data.last); // 'last' is true if it's the last slice\n        setCurrentPage(pageToFetch + 1); // Increment for the next fetch\n      } else {\n        setHasMore(false); // No more content or empty slice received\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch employees:\", error);\n      setHasMore(false); // Stop trying to fetch on error\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isLoading]); // Removed currentPage from dependencies to avoid potential issues with useCallback closure\n\n  // Initial data load when component mounts\n  useEffect(() => {\n    // Reset state for a clean load, especially if this component could be re-mounted with filters, etc.\n    setEmployees([]);\n    setCurrentPage(0);\n    setHasMore(true); // Assume there's data initially\n    // Fetch initial batch\n    fetchEmployees(0); // Fetch the first page (page 0)\n  }, [fetchEmployees]); // Rerun if fetchEmployees definition changes (though it shouldn't often with useCallback)\n\n\n  const loadMoreEmployees = () => {\n    if (!isLoading && hasMore) {\n        fetchEmployees(currentPage);\n    }\n  }\n\n  return (\n    <div className=\"employee-list-container\">\n      <h1>Employee Directory</h1>\n      <InfiniteScroll\n        dataLength={employees.length} // This is important to prevent fetching too often\n        next={loadMoreEmployees} // Function to call when more data needs to be loaded\n        hasMore={hasMore} // Boolean indicating if there is more data to load\n        loader={<div className=\"loader\"><h4>Loading more employees...</h4></div>}\n        endMessage={\n          <p style={{ textAlign: 'center' }} className=\"end-message\">\n            <b>You've reached the end of the list!</b>\n          </p>\n        }\n        // scrollThreshold=\"200px\" // Optional: Load when 200px from bottom\n        // scrollableTarget=\"scrollableDivId\" // Use if scrolling is within a specific div, not window\n      >\n        {employees.length > 0 ? (\n          employees.map(employee => (\n            <div key={employee.id} className=\"employee-card\">\n              <h3>{employee.firstName} {employee.lastName}</h3>\n              <p><strong>ID:</strong> {employee.id}</p>\n              <p><strong>Birth Date:</strong> {employee.birthDate ? new Date(employee.birthDate).toLocaleDateString() : 'N/A'}</p>\n            </div>\n          ))\n        ) : (\n          !isLoading && !hasMore && <p className=\"no-employees\">No employees found.</p>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n}\n\nexport default EmployeeList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}